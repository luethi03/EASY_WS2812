
Atmega2561.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00001568  000015fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800072  00800072  0000160e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085c  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000618  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000984  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00002eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039c  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000145  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00003439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6a c0       	rjmp	.+212    	; 0xd6 <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e8 e6       	ldi	r30, 0x68	; 104
      ea:	f5 e1       	ldi	r31, 0x15	; 21
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a2 37       	cpi	r26, 0x72	; 114
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a2 e7       	ldi	r26, 0x72	; 114
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a9 37       	cpi	r26, 0x79	; 121
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	1f d5       	rcall	.+2622   	; 0xb48 <main>
     10a:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <HSV_to_RGB>:
/*** Projekt-Includes ***/
#include "WS2812b.h"


uint32_t HSV_to_RGB(unsigned int uiH, unsigned char ucS, unsigned char ucV, unsigned char ucDirectSend, unsigned int uiLEDs)
{
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	60 97       	sbiw	r28, 0x10	; 16
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	f8 94       	cli
     122:	de bf       	out	0x3e, r29	; 62
     124:	0f be       	out	0x3f, r0	; 63
     126:	cd bf       	out	0x3d, r28	; 61
     128:	9b 87       	std	Y+11, r25	; 0x0b
     12a:	8a 87       	std	Y+10, r24	; 0x0a
     12c:	6c 87       	std	Y+12, r22	; 0x0c
     12e:	4d 87       	std	Y+13, r20	; 0x0d
     130:	2e 87       	std	Y+14, r18	; 0x0e
     132:	18 8b       	std	Y+16, r17	; 0x10
     134:	0f 87       	std	Y+15, r16	; 0x0f
	unsigned char ucRn;
	unsigned char ucGn;
	unsigned char ucBn;
	unsigned int diff;
	
	if(uiH<61)
     136:	8a 85       	ldd	r24, Y+10	; 0x0a
     138:	9b 85       	ldd	r25, Y+11	; 0x0b
     13a:	cd 97       	sbiw	r24, 0x3d	; 61
     13c:	e8 f4       	brcc	.+58     	; 0x178 <HSV_to_RGB+0x68>
	{
		ucRn = 255;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	89 83       	std	Y+1, r24	; 0x01
		ucBn = 0;
     142:	1b 82       	std	Y+3, r1	; 0x03
		ucGn = 4.25 * uiH;
     144:	8a 85       	ldd	r24, Y+10	; 0x0a
     146:	9b 85       	ldd	r25, Y+11	; 0x0b
     148:	cc 01       	movw	r24, r24
     14a:	a0 e0       	ldi	r26, 0x00	; 0
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	bc 01       	movw	r22, r24
     150:	cd 01       	movw	r24, r26
     152:	fb d6       	rcall	.+3574   	; 0xf4a <__floatunsisf>
     154:	dc 01       	movw	r26, r24
     156:	cb 01       	movw	r24, r22
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	48 e8       	ldi	r20, 0x88	; 136
     15e:	50 e4       	ldi	r21, 0x40	; 64
     160:	bc 01       	movw	r22, r24
     162:	cd 01       	movw	r24, r26
     164:	a8 d7       	rcall	.+3920   	; 0x10b6 <__mulsf3>
     166:	dc 01       	movw	r26, r24
     168:	cb 01       	movw	r24, r22
     16a:	bc 01       	movw	r22, r24
     16c:	cd 01       	movw	r24, r26
     16e:	c1 d6       	rcall	.+3458   	; 0xef2 <__fixunssfsi>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	8a 83       	std	Y+2, r24	; 0x02
     176:	cd c0       	rjmp	.+410    	; 0x312 <HSV_to_RGB+0x202>
	}
	else if(uiH < 121)
     178:	8a 85       	ldd	r24, Y+10	; 0x0a
     17a:	9b 85       	ldd	r25, Y+11	; 0x0b
     17c:	89 37       	cpi	r24, 0x79	; 121
     17e:	91 05       	cpc	r25, r1
     180:	38 f5       	brcc	.+78     	; 0x1d0 <HSV_to_RGB+0xc0>
	{
		ucGn = 255;
     182:	8f ef       	ldi	r24, 0xFF	; 255
     184:	8a 83       	std	Y+2, r24	; 0x02
		ucBn = 0;
     186:	1b 82       	std	Y+3, r1	; 0x03
		ucRn = 255 - (4.25 * (uiH-60));
     188:	8a 85       	ldd	r24, Y+10	; 0x0a
     18a:	9b 85       	ldd	r25, Y+11	; 0x0b
     18c:	cc 97       	sbiw	r24, 0x3c	; 60
     18e:	cc 01       	movw	r24, r24
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	bc 01       	movw	r22, r24
     196:	cd 01       	movw	r24, r26
     198:	d8 d6       	rcall	.+3504   	; 0xf4a <__floatunsisf>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	48 e8       	ldi	r20, 0x88	; 136
     1a4:	50 e4       	ldi	r21, 0x40	; 64
     1a6:	bc 01       	movw	r22, r24
     1a8:	cd 01       	movw	r24, r26
     1aa:	85 d7       	rcall	.+3850   	; 0x10b6 <__mulsf3>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	9c 01       	movw	r18, r24
     1b2:	ad 01       	movw	r20, r26
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	8f e7       	ldi	r24, 0x7F	; 127
     1ba:	93 e4       	ldi	r25, 0x43	; 67
     1bc:	31 d6       	rcall	.+3170   	; 0xe20 <__subsf3>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	bc 01       	movw	r22, r24
     1c4:	cd 01       	movw	r24, r26
     1c6:	95 d6       	rcall	.+3370   	; 0xef2 <__fixunssfsi>
     1c8:	dc 01       	movw	r26, r24
     1ca:	cb 01       	movw	r24, r22
     1cc:	89 83       	std	Y+1, r24	; 0x01
     1ce:	a1 c0       	rjmp	.+322    	; 0x312 <HSV_to_RGB+0x202>
	}
	else if(uiH < 181)
     1d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1d2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1d4:	85 3b       	cpi	r24, 0xB5	; 181
     1d6:	91 05       	cpc	r25, r1
     1d8:	f8 f4       	brcc	.+62     	; 0x218 <HSV_to_RGB+0x108>
	{
		ucRn = 0;
     1da:	19 82       	std	Y+1, r1	; 0x01
		ucGn = 255;
     1dc:	8f ef       	ldi	r24, 0xFF	; 255
     1de:	8a 83       	std	Y+2, r24	; 0x02
		ucBn = 4.25 * (uiH-120);
     1e0:	8a 85       	ldd	r24, Y+10	; 0x0a
     1e2:	9b 85       	ldd	r25, Y+11	; 0x0b
     1e4:	88 57       	subi	r24, 0x78	; 120
     1e6:	91 09       	sbc	r25, r1
     1e8:	cc 01       	movw	r24, r24
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	bc 01       	movw	r22, r24
     1f0:	cd 01       	movw	r24, r26
     1f2:	ab d6       	rcall	.+3414   	; 0xf4a <__floatunsisf>
     1f4:	dc 01       	movw	r26, r24
     1f6:	cb 01       	movw	r24, r22
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	48 e8       	ldi	r20, 0x88	; 136
     1fe:	50 e4       	ldi	r21, 0x40	; 64
     200:	bc 01       	movw	r22, r24
     202:	cd 01       	movw	r24, r26
     204:	58 d7       	rcall	.+3760   	; 0x10b6 <__mulsf3>
     206:	dc 01       	movw	r26, r24
     208:	cb 01       	movw	r24, r22
     20a:	bc 01       	movw	r22, r24
     20c:	cd 01       	movw	r24, r26
     20e:	71 d6       	rcall	.+3298   	; 0xef2 <__fixunssfsi>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	8b 83       	std	Y+3, r24	; 0x03
     216:	7d c0       	rjmp	.+250    	; 0x312 <HSV_to_RGB+0x202>
	}
	else if(uiH < 241)
     218:	8a 85       	ldd	r24, Y+10	; 0x0a
     21a:	9b 85       	ldd	r25, Y+11	; 0x0b
     21c:	81 3f       	cpi	r24, 0xF1	; 241
     21e:	91 05       	cpc	r25, r1
     220:	40 f5       	brcc	.+80     	; 0x272 <HSV_to_RGB+0x162>
	{
		ucRn = 0;
     222:	19 82       	std	Y+1, r1	; 0x01
		ucBn = 255;
     224:	8f ef       	ldi	r24, 0xFF	; 255
		ucGn = 255 - (4.25 * (uiH-180));
     226:	8b 83       	std	Y+3, r24	; 0x03
     228:	8a 85       	ldd	r24, Y+10	; 0x0a
     22a:	9b 85       	ldd	r25, Y+11	; 0x0b
     22c:	84 5b       	subi	r24, 0xB4	; 180
     22e:	91 09       	sbc	r25, r1
     230:	cc 01       	movw	r24, r24
     232:	a0 e0       	ldi	r26, 0x00	; 0
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	bc 01       	movw	r22, r24
     238:	cd 01       	movw	r24, r26
     23a:	87 d6       	rcall	.+3342   	; 0xf4a <__floatunsisf>
     23c:	dc 01       	movw	r26, r24
     23e:	cb 01       	movw	r24, r22
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	48 e8       	ldi	r20, 0x88	; 136
     246:	50 e4       	ldi	r21, 0x40	; 64
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	34 d7       	rcall	.+3688   	; 0x10b6 <__mulsf3>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	9c 01       	movw	r18, r24
     254:	ad 01       	movw	r20, r26
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	8f e7       	ldi	r24, 0x7F	; 127
     25c:	93 e4       	ldi	r25, 0x43	; 67
     25e:	e0 d5       	rcall	.+3008   	; 0xe20 <__subsf3>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	bc 01       	movw	r22, r24
     266:	cd 01       	movw	r24, r26
     268:	44 d6       	rcall	.+3208   	; 0xef2 <__fixunssfsi>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	8a 83       	std	Y+2, r24	; 0x02
     270:	50 c0       	rjmp	.+160    	; 0x312 <HSV_to_RGB+0x202>
	}
	else if(uiH < 301)
     272:	8a 85       	ldd	r24, Y+10	; 0x0a
     274:	9b 85       	ldd	r25, Y+11	; 0x0b
     276:	8d 32       	cpi	r24, 0x2D	; 45
     278:	91 40       	sbci	r25, 0x01	; 1
	{
		ucGn = 0;
     27a:	f8 f4       	brcc	.+62     	; 0x2ba <HSV_to_RGB+0x1aa>
		ucBn = 255;
     27c:	1a 82       	std	Y+2, r1	; 0x02
     27e:	8f ef       	ldi	r24, 0xFF	; 255
		ucRn = 4.25 * (uiH-240);
     280:	8b 83       	std	Y+3, r24	; 0x03
     282:	8a 85       	ldd	r24, Y+10	; 0x0a
     284:	9b 85       	ldd	r25, Y+11	; 0x0b
     286:	80 5f       	subi	r24, 0xF0	; 240
     288:	91 09       	sbc	r25, r1
     28a:	cc 01       	movw	r24, r24
     28c:	a0 e0       	ldi	r26, 0x00	; 0
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	5a d6       	rcall	.+3252   	; 0xf4a <__floatunsisf>
     296:	dc 01       	movw	r26, r24
     298:	cb 01       	movw	r24, r22
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	48 e8       	ldi	r20, 0x88	; 136
     2a0:	50 e4       	ldi	r21, 0x40	; 64
     2a2:	bc 01       	movw	r22, r24
     2a4:	cd 01       	movw	r24, r26
     2a6:	07 d7       	rcall	.+3598   	; 0x10b6 <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	bc 01       	movw	r22, r24
     2ae:	cd 01       	movw	r24, r26
     2b0:	20 d6       	rcall	.+3136   	; 0xef2 <__fixunssfsi>
     2b2:	dc 01       	movw	r26, r24
     2b4:	cb 01       	movw	r24, r22
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	2c c0       	rjmp	.+88     	; 0x312 <HSV_to_RGB+0x202>
	}
	else if(uiH< 360)
     2ba:	8a 85       	ldd	r24, Y+10	; 0x0a
     2bc:	9b 85       	ldd	r25, Y+11	; 0x0b
     2be:	88 36       	cpi	r24, 0x68	; 104
     2c0:	91 40       	sbci	r25, 0x01	; 1
	{
		ucRn = 255;
     2c2:	38 f5       	brcc	.+78     	; 0x312 <HSV_to_RGB+0x202>
     2c4:	8f ef       	ldi	r24, 0xFF	; 255
		ucGn = 0;
     2c6:	89 83       	std	Y+1, r24	; 0x01
		ucBn = 255 - (4.25 * (uiH-300));
     2c8:	1a 82       	std	Y+2, r1	; 0x02
     2ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     2cc:	9b 85       	ldd	r25, Y+11	; 0x0b
     2ce:	8c 52       	subi	r24, 0x2C	; 44
     2d0:	91 40       	sbci	r25, 0x01	; 1
     2d2:	cc 01       	movw	r24, r24
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	36 d6       	rcall	.+3180   	; 0xf4a <__floatunsisf>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	48 e8       	ldi	r20, 0x88	; 136
     2e8:	50 e4       	ldi	r21, 0x40	; 64
     2ea:	bc 01       	movw	r22, r24
     2ec:	cd 01       	movw	r24, r26
     2ee:	e3 d6       	rcall	.+3526   	; 0x10b6 <__mulsf3>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	9c 01       	movw	r18, r24
     2f6:	ad 01       	movw	r20, r26
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	8f e7       	ldi	r24, 0x7F	; 127
     2fe:	93 e4       	ldi	r25, 0x43	; 67
     300:	8f d5       	rcall	.+2846   	; 0xe20 <__subsf3>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	bc 01       	movw	r22, r24
     308:	cd 01       	movw	r24, r26
     30a:	f3 d5       	rcall	.+3046   	; 0xef2 <__fixunssfsi>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	ucS = 100 - ucS; //Kehrwert berechnen
     312:	94 e6       	ldi	r25, 0x64	; 100
     314:	8c 85       	ldd	r24, Y+12	; 0x0c
     316:	59 2f       	mov	r21, r25
     318:	58 1b       	sub	r21, r24
     31a:	85 2f       	mov	r24, r21
     31c:	8c 87       	std	Y+12, r24	; 0x0c
	diff = ((255 - ucRn) * ucS)/100;
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	88 2f       	mov	r24, r24
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	2f ef       	ldi	r18, 0xFF	; 255
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	28 1b       	sub	r18, r24
     32a:	39 0b       	sbc	r19, r25
     32c:	8c 85       	ldd	r24, Y+12	; 0x0c
     32e:	88 2f       	mov	r24, r24
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	28 9f       	mul	r18, r24
     334:	a0 01       	movw	r20, r0
     336:	29 9f       	mul	r18, r25
     338:	50 0d       	add	r21, r0
     33a:	38 9f       	mul	r19, r24
     33c:	50 0d       	add	r21, r0
     33e:	11 24       	eor	r1, r1
     340:	24 e6       	ldi	r18, 0x64	; 100
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	ca 01       	movw	r24, r20
     346:	b9 01       	movw	r22, r18
     348:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     34c:	cb 01       	movw	r24, r22
     34e:	9d 83       	std	Y+5, r25	; 0x05
     350:	8c 83       	std	Y+4, r24	; 0x04
	ucRn = ucRn + diff;
     352:	8c 81       	ldd	r24, Y+4	; 0x04
     354:	99 81       	ldd	r25, Y+1	; 0x01
     356:	89 0f       	add	r24, r25
     358:	89 83       	std	Y+1, r24	; 0x01
	diff = ((255 - ucGn) * ucS)/100;
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	2f ef       	ldi	r18, 0xFF	; 255
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	28 1b       	sub	r18, r24
     366:	39 0b       	sbc	r19, r25
     368:	8c 85       	ldd	r24, Y+12	; 0x0c
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	28 9f       	mul	r18, r24
     370:	a0 01       	movw	r20, r0
     372:	29 9f       	mul	r18, r25
     374:	50 0d       	add	r21, r0
     376:	38 9f       	mul	r19, r24
     378:	50 0d       	add	r21, r0
     37a:	11 24       	eor	r1, r1
     37c:	24 e6       	ldi	r18, 0x64	; 100
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	ca 01       	movw	r24, r20
     382:	b9 01       	movw	r22, r18
     384:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	9d 83       	std	Y+5, r25	; 0x05
     38c:	8c 83       	std	Y+4, r24	; 0x04
	ucGn = ucGn + diff;
     38e:	8c 81       	ldd	r24, Y+4	; 0x04
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	89 0f       	add	r24, r25
     394:	8a 83       	std	Y+2, r24	; 0x02
	diff = ((255 - ucBn) * ucS)/100;
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2f ef       	ldi	r18, 0xFF	; 255
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	28 1b       	sub	r18, r24
     3a2:	39 0b       	sbc	r19, r25
     3a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	28 9f       	mul	r18, r24
     3ac:	a0 01       	movw	r20, r0
     3ae:	29 9f       	mul	r18, r25
     3b0:	50 0d       	add	r21, r0
     3b2:	38 9f       	mul	r19, r24
     3b4:	50 0d       	add	r21, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	24 e6       	ldi	r18, 0x64	; 100
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	ca 01       	movw	r24, r20
     3be:	b9 01       	movw	r22, r18
     3c0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     3c4:	cb 01       	movw	r24, r22
     3c6:	9d 83       	std	Y+5, r25	; 0x05
	ucBn = ucBn + diff;
     3c8:	8c 83       	std	Y+4, r24	; 0x04
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	9b 81       	ldd	r25, Y+3	; 0x03
     3ce:	89 0f       	add	r24, r25
	
	
	ucV = pow(ucV,0.9f);
     3d0:	8b 83       	std	Y+3, r24	; 0x03
     3d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d4:	88 2f       	mov	r24, r24
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	bc 01       	movw	r22, r24
     3de:	cd 01       	movw	r24, r26
     3e0:	b4 d5       	rcall	.+2920   	; 0xf4a <__floatunsisf>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	26 e6       	ldi	r18, 0x66	; 102
     3e8:	36 e6       	ldi	r19, 0x66	; 102
     3ea:	46 e6       	ldi	r20, 0x66	; 102
     3ec:	5f e3       	ldi	r21, 0x3F	; 63
     3ee:	bc 01       	movw	r22, r24
     3f0:	cd 01       	movw	r24, r26
     3f2:	c4 d6       	rcall	.+3464   	; 0x117c <pow>
     3f4:	dc 01       	movw	r26, r24
     3f6:	cb 01       	movw	r24, r22
     3f8:	bc 01       	movw	r22, r24
     3fa:	cd 01       	movw	r24, r26
     3fc:	7a d5       	rcall	.+2804   	; 0xef2 <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	8d 87       	std	Y+13, r24	; 0x0d
     404:	89 81       	ldd	r24, Y+1	; 0x01
	
	if (ucRn != 0)
     406:	88 23       	and	r24, r24
     408:	a9 f0       	breq	.+42     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     40a:	89 81       	ldd	r24, Y+1	; 0x01
	{
		ucRn = (ucRn * ucV)/100;
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	8d 85       	ldd	r24, Y+13	; 0x0d
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	28 9f       	mul	r18, r24
     418:	a0 01       	movw	r20, r0
     41a:	29 9f       	mul	r18, r25
     41c:	50 0d       	add	r21, r0
     41e:	38 9f       	mul	r19, r24
     420:	50 0d       	add	r21, r0
     422:	11 24       	eor	r1, r1
     424:	24 e6       	ldi	r18, 0x64	; 100
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	ca 01       	movw	r24, r20
     42a:	b9 01       	movw	r22, r18
     42c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     430:	cb 01       	movw	r24, r22
     432:	89 83       	std	Y+1, r24	; 0x01
     434:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	
	if (ucGn != 0)
     436:	88 23       	and	r24, r24
     438:	a9 f0       	breq	.+42     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     43a:	8a 81       	ldd	r24, Y+2	; 0x02
	{
		ucGn = (ucGn * ucV)/100;
     43c:	28 2f       	mov	r18, r24
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	8d 85       	ldd	r24, Y+13	; 0x0d
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	28 9f       	mul	r18, r24
     448:	a0 01       	movw	r20, r0
     44a:	29 9f       	mul	r18, r25
     44c:	50 0d       	add	r21, r0
     44e:	38 9f       	mul	r19, r24
     450:	50 0d       	add	r21, r0
     452:	11 24       	eor	r1, r1
     454:	24 e6       	ldi	r18, 0x64	; 100
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	ca 01       	movw	r24, r20
     45a:	b9 01       	movw	r22, r18
     45c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     460:	cb 01       	movw	r24, r22
     462:	8a 83       	std	Y+2, r24	; 0x02
     464:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	
	if (ucBn != 0)
     466:	88 23       	and	r24, r24
     468:	a9 f0       	breq	.+42     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
	{
		ucBn = (ucBn * ucV)/100;
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	8d 85       	ldd	r24, Y+13	; 0x0d
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	28 9f       	mul	r18, r24
     478:	a0 01       	movw	r20, r0
     47a:	29 9f       	mul	r18, r25
     47c:	50 0d       	add	r21, r0
     47e:	38 9f       	mul	r19, r24
     480:	50 0d       	add	r21, r0
     482:	11 24       	eor	r1, r1
     484:	24 e6       	ldi	r18, 0x64	; 100
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	ca 01       	movw	r24, r20
     48a:	b9 01       	movw	r22, r18
     48c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__divmodhi4>
     490:	cb 01       	movw	r24, r22
     492:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	if (ucDirectSend )
     494:	8e 85       	ldd	r24, Y+14	; 0x0e
     496:	88 23       	and	r24, r24
     498:	51 f0       	breq	.+20     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
	{
		LED_WRITE(
     49a:	8f 85       	ldd	r24, Y+15	; 0x0f
     49c:	98 89       	ldd	r25, Y+16	; 0x10
     49e:	2b 81       	ldd	r18, Y+3	; 0x03
     4a0:	4a 81       	ldd	r20, Y+2	; 0x02
     4a2:	69 81       	ldd	r22, Y+1	; 0x01
     4a4:	35 d0       	rcall	.+106    	; 0x510 <LED_WRITE>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
		uiLEDs, ucRn, ucGn, ucBn);
		return 0; 
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	dc 01       	movw	r26, r24
     4ac:	24 c0       	rjmp	.+72     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
	}
	else
	{
		uint32_t uiColor;
		uiColor = ((ucRn  << 16) | (ucGn << 8) | ucBn);
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	20 e1       	ldi	r18, 0x10	; 16
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	ac 01       	movw	r20, r24
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4bc:	44 0f       	add	r20, r20
     4be:	55 1f       	adc	r21, r21
     4c0:	2a 95       	dec	r18
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4c4:	9a 01       	movw	r18, r20
     4c6:	8a 81       	ldd	r24, Y+2	; 0x02
     4c8:	88 2f       	mov	r24, r24
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	98 2f       	mov	r25, r24
     4ce:	88 27       	eor	r24, r24
     4d0:	28 2b       	or	r18, r24
     4d2:	39 2b       	or	r19, r25
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	82 2b       	or	r24, r18
     4dc:	93 2b       	or	r25, r19
     4de:	09 2e       	mov	r0, r25
     4e0:	00 0c       	add	r0, r0
     4e2:	aa 0b       	sbc	r26, r26
     4e4:	bb 0b       	sbc	r27, r27
     4e6:	8e 83       	std	Y+6, r24	; 0x06
     4e8:	9f 83       	std	Y+7, r25	; 0x07
     4ea:	a8 87       	std	Y+8, r26	; 0x08
     4ec:	b9 87       	std	Y+9, r27	; 0x09
     4ee:	8e 81       	ldd	r24, Y+6	; 0x06
		return uiColor;
     4f0:	9f 81       	ldd	r25, Y+7	; 0x07
     4f2:	a8 85       	ldd	r26, Y+8	; 0x08
     4f4:	b9 85       	ldd	r27, Y+9	; 0x09
     4f6:	bc 01       	movw	r22, r24
	}
	
}
     4f8:	cd 01       	movw	r24, r26
     4fa:	60 96       	adiw	r28, 0x10	; 16
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <LED_WRITE>:
     510:	cf 93       	push	r28

void LED_WRITE(unsigned int uiLEDs, unsigned char ucR, unsigned char ucG, unsigned char ucB)
{
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <LED_WRITE+0x6>
     516:	00 d0       	rcall	.+0      	; 0x518 <LED_WRITE+0x8>
     518:	1f 92       	push	r1
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	6b 83       	std	Y+3, r22	; 0x03
     524:	4c 83       	std	Y+4, r20	; 0x04
     526:	2d 83       	std	Y+5, r18	; 0x05
	i = 0;
     528:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <i>
	STARTtrans:
	i++;
     52c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <i>
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <i>
		if ( ucG & 0x80 )
     536:	8c 81       	ldd	r24, Y+4	; 0x04
     538:	88 23       	and	r24, r24
     53a:	94 f4       	brge	.+36     	; 0x560 <LED_WRITE+0x50>
		{
			OUTPORT = 0xFF;
     53c:	88 e3       	ldi	r24, 0x38	; 56
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	2f ef       	ldi	r18, 0xFF	; 255
     542:	fc 01       	movw	r30, r24
     544:	20 83       	st	Z, r18
	...
			NOPON
			__asm__("nop;\nnop");
			NOPON
			NOPON
			OUTPORT = 0x00;
     556:	88 e3       	ldi	r24, 0x38	; 56
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	fc 01       	movw	r30, r24
     55c:	10 82       	st	Z, r1
     55e:	09 c0       	rjmp	.+18     	; 0x572 <LED_WRITE+0x62>
		}
		else
		{
			OUTPORT = 0xFF;
     560:	88 e3       	ldi	r24, 0x38	; 56
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	2f ef       	ldi	r18, 0xFF	; 255
     566:	fc 01       	movw	r30, r24
     568:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     56a:	88 e3       	ldi	r24, 0x38	; 56
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	fc 01       	movw	r30, r24
     570:	10 82       	st	Z, r1
		}
	
		if ( ucG & 0x40 )
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	80 74       	andi	r24, 0x40	; 64
     57a:	99 27       	eor	r25, r25
     57c:	89 2b       	or	r24, r25
     57e:	81 f0       	breq	.+32     	; 0x5a0 <LED_WRITE+0x90>
		{
			OUTPORT = 0xFF;
     580:	88 e3       	ldi	r24, 0x38	; 56
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	2f ef       	ldi	r18, 0xFF	; 255
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     596:	88 e3       	ldi	r24, 0x38	; 56
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	fc 01       	movw	r30, r24
     59c:	10 82       	st	Z, r1
     59e:	09 c0       	rjmp	.+18     	; 0x5b2 <LED_WRITE+0xa2>
		}
		else
		{
			OUTPORT = 0xFF;
     5a0:	88 e3       	ldi	r24, 0x38	; 56
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	fc 01       	movw	r30, r24
     5a8:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     5aa:	88 e3       	ldi	r24, 0x38	; 56
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	10 82       	st	Z, r1
		}
		
		if ( ucG & 0x20 )
     5b2:	8c 81       	ldd	r24, Y+4	; 0x04
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	80 72       	andi	r24, 0x20	; 32
     5ba:	99 27       	eor	r25, r25
     5bc:	89 2b       	or	r24, r25
     5be:	81 f0       	breq	.+32     	; 0x5e0 <LED_WRITE+0xd0>
		{
			OUTPORT = 0xFF;
     5c0:	88 e3       	ldi	r24, 0x38	; 56
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	2f ef       	ldi	r18, 0xFF	; 255
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     5d6:	88 e3       	ldi	r24, 0x38	; 56
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	10 82       	st	Z, r1
     5de:	09 c0       	rjmp	.+18     	; 0x5f2 <LED_WRITE+0xe2>
		}
		else
		{
			OUTPORT = 0xFF;
     5e0:	88 e3       	ldi	r24, 0x38	; 56
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     5ea:	88 e3       	ldi	r24, 0x38	; 56
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	fc 01       	movw	r30, r24
     5f0:	10 82       	st	Z, r1
		}
		
		if ( ucG & 0x10 )
     5f2:	8c 81       	ldd	r24, Y+4	; 0x04
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	80 71       	andi	r24, 0x10	; 16
     5fa:	99 27       	eor	r25, r25
     5fc:	89 2b       	or	r24, r25
     5fe:	81 f0       	breq	.+32     	; 0x620 <LED_WRITE+0x110>
		{
			OUTPORT = 0xFF;
     600:	88 e3       	ldi	r24, 0x38	; 56
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	2f ef       	ldi	r18, 0xFF	; 255
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     616:	88 e3       	ldi	r24, 0x38	; 56
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	10 82       	st	Z, r1
     61e:	09 c0       	rjmp	.+18     	; 0x632 <LED_WRITE+0x122>
		}
		else
		{
			OUTPORT = 0xFF;
     620:	88 e3       	ldi	r24, 0x38	; 56
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2f ef       	ldi	r18, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     62a:	88 e3       	ldi	r24, 0x38	; 56
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	10 82       	st	Z, r1
		}
		
		if ( ucG & 0x08 )
     632:	8c 81       	ldd	r24, Y+4	; 0x04
     634:	88 2f       	mov	r24, r24
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	88 70       	andi	r24, 0x08	; 8
     63a:	99 27       	eor	r25, r25
     63c:	89 2b       	or	r24, r25
     63e:	81 f0       	breq	.+32     	; 0x660 <LED_WRITE+0x150>
		{
			OUTPORT = 0xFF;
     640:	88 e3       	ldi	r24, 0x38	; 56
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     656:	88 e3       	ldi	r24, 0x38	; 56
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	fc 01       	movw	r30, r24
     65c:	10 82       	st	Z, r1
     65e:	09 c0       	rjmp	.+18     	; 0x672 <LED_WRITE+0x162>
		}
		else
		{
			OUTPORT = 0xFF;
     660:	88 e3       	ldi	r24, 0x38	; 56
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	2f ef       	ldi	r18, 0xFF	; 255
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     66a:	88 e3       	ldi	r24, 0x38	; 56
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	10 82       	st	Z, r1
		}
		
		if ( ucG & 0x04 )
     672:	8c 81       	ldd	r24, Y+4	; 0x04
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	84 70       	andi	r24, 0x04	; 4
     67a:	99 27       	eor	r25, r25
     67c:	89 2b       	or	r24, r25
     67e:	81 f0       	breq	.+32     	; 0x6a0 <LED_WRITE+0x190>
		{
			OUTPORT = 0xFF;
     680:	88 e3       	ldi	r24, 0x38	; 56
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     696:	88 e3       	ldi	r24, 0x38	; 56
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	fc 01       	movw	r30, r24
     69c:	10 82       	st	Z, r1
     69e:	09 c0       	rjmp	.+18     	; 0x6b2 <LED_WRITE+0x1a2>
		}
		else
		{
			OUTPORT = 0xFF;
     6a0:	88 e3       	ldi	r24, 0x38	; 56
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	2f ef       	ldi	r18, 0xFF	; 255
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     6aa:	88 e3       	ldi	r24, 0x38	; 56
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	10 82       	st	Z, r1
		}
		
		if ( ucG & 0x02 )
     6b2:	8c 81       	ldd	r24, Y+4	; 0x04
     6b4:	88 2f       	mov	r24, r24
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	82 70       	andi	r24, 0x02	; 2
     6ba:	99 27       	eor	r25, r25
     6bc:	89 2b       	or	r24, r25
     6be:	81 f0       	breq	.+32     	; 0x6e0 <LED_WRITE+0x1d0>
		{
			OUTPORT = 0xFF;
     6c0:	88 e3       	ldi	r24, 0x38	; 56
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	2f ef       	ldi	r18, 0xFF	; 255
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     6d6:	88 e3       	ldi	r24, 0x38	; 56
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	10 82       	st	Z, r1
     6de:	09 c0       	rjmp	.+18     	; 0x6f2 <LED_WRITE+0x1e2>
		}
		else
		{
			OUTPORT = 0xFF;
     6e0:	88 e3       	ldi	r24, 0x38	; 56
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	2f ef       	ldi	r18, 0xFF	; 255
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     6ea:	88 e3       	ldi	r24, 0x38	; 56
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	10 82       	st	Z, r1
		}
		
		if ( ucG & 0x01 )
     6f2:	8c 81       	ldd	r24, Y+4	; 0x04
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	81 70       	andi	r24, 0x01	; 1
     6fa:	99 27       	eor	r25, r25
     6fc:	89 2b       	or	r24, r25
     6fe:	81 f0       	breq	.+32     	; 0x720 <LED_WRITE+0x210>
		{
			OUTPORT = 0xFF;
     700:	88 e3       	ldi	r24, 0x38	; 56
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	2f ef       	ldi	r18, 0xFF	; 255
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     716:	88 e3       	ldi	r24, 0x38	; 56
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	fc 01       	movw	r30, r24
     71c:	10 82       	st	Z, r1
     71e:	09 c0       	rjmp	.+18     	; 0x732 <LED_WRITE+0x222>
		}
		else
		{
			OUTPORT = 0xFF;
     720:	88 e3       	ldi	r24, 0x38	; 56
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	2f ef       	ldi	r18, 0xFF	; 255
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     72a:	88 e3       	ldi	r24, 0x38	; 56
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	fc 01       	movw	r30, r24
     730:	10 82       	st	Z, r1
		}
		
		if ( (ucR & 0x80) )
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	88 23       	and	r24, r24
     736:	84 f4       	brge	.+32     	; 0x758 <LED_WRITE+0x248>
		{
			OUTPORT = 0xFF;
     738:	88 e3       	ldi	r24, 0x38	; 56
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     74e:	88 e3       	ldi	r24, 0x38	; 56
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	fc 01       	movw	r30, r24
     754:	10 82       	st	Z, r1
     756:	09 c0       	rjmp	.+18     	; 0x76a <LED_WRITE+0x25a>
		}
		else
		{
			OUTPORT = 0xFF;
     758:	88 e3       	ldi	r24, 0x38	; 56
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2f ef       	ldi	r18, 0xFF	; 255
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     762:	88 e3       	ldi	r24, 0x38	; 56
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	10 82       	st	Z, r1
		}
		
		if ( ucR & 0x40 )
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	80 74       	andi	r24, 0x40	; 64
     772:	99 27       	eor	r25, r25
     774:	89 2b       	or	r24, r25
     776:	81 f0       	breq	.+32     	; 0x798 <LED_WRITE+0x288>
		{
			OUTPORT = 0xFF;
     778:	88 e3       	ldi	r24, 0x38	; 56
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     78e:	88 e3       	ldi	r24, 0x38	; 56
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	fc 01       	movw	r30, r24
     794:	10 82       	st	Z, r1
     796:	09 c0       	rjmp	.+18     	; 0x7aa <LED_WRITE+0x29a>
		}
		else
		{
			OUTPORT = 0xFF;
     798:	88 e3       	ldi	r24, 0x38	; 56
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	2f ef       	ldi	r18, 0xFF	; 255
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     7a2:	88 e3       	ldi	r24, 0x38	; 56
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	10 82       	st	Z, r1
		}
		
		if ( ucR & 0x20 )
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	88 2f       	mov	r24, r24
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	80 72       	andi	r24, 0x20	; 32
     7b2:	99 27       	eor	r25, r25
     7b4:	89 2b       	or	r24, r25
     7b6:	81 f0       	breq	.+32     	; 0x7d8 <LED_WRITE+0x2c8>
		{
			OUTPORT = 0xFF;
     7b8:	88 e3       	ldi	r24, 0x38	; 56
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2f ef       	ldi	r18, 0xFF	; 255
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     7ce:	88 e3       	ldi	r24, 0x38	; 56
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	fc 01       	movw	r30, r24
     7d4:	10 82       	st	Z, r1
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <LED_WRITE+0x2da>
		}
		else
		{
			OUTPORT = 0xFF;
     7d8:	88 e3       	ldi	r24, 0x38	; 56
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     7e2:	88 e3       	ldi	r24, 0x38	; 56
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	10 82       	st	Z, r1
		}
		
		if ( ucR & 0x10 )
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	80 71       	andi	r24, 0x10	; 16
     7f2:	99 27       	eor	r25, r25
     7f4:	89 2b       	or	r24, r25
     7f6:	81 f0       	breq	.+32     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		{
			OUTPORT = 0xFF;
     7f8:	88 e3       	ldi	r24, 0x38	; 56
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     80e:	88 e3       	ldi	r24, 0x38	; 56
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	fc 01       	movw	r30, r24
     814:	10 82       	st	Z, r1
     816:	09 c0       	rjmp	.+18     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		}
		else
		{
			OUTPORT = 0xFF;
     818:	88 e3       	ldi	r24, 0x38	; 56
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	2f ef       	ldi	r18, 0xFF	; 255
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     822:	88 e3       	ldi	r24, 0x38	; 56
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	10 82       	st	Z, r1
		}
		
		if ( ucR& 0x08 )
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	88 2f       	mov	r24, r24
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	88 70       	andi	r24, 0x08	; 8
     832:	99 27       	eor	r25, r25
     834:	89 2b       	or	r24, r25
     836:	81 f0       	breq	.+32     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		{
			OUTPORT = 0xFF;
     838:	88 e3       	ldi	r24, 0x38	; 56
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     84e:	88 e3       	ldi	r24, 0x38	; 56
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	fc 01       	movw	r30, r24
     854:	10 82       	st	Z, r1
     856:	09 c0       	rjmp	.+18     	; 0x86a <__stack+0xb>
		}
		else
		{
			OUTPORT = 0xFF;
     858:	88 e3       	ldi	r24, 0x38	; 56
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	fc 01       	movw	r30, r24
     860:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     862:	88 e3       	ldi	r24, 0x38	; 56
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	fc 01       	movw	r30, r24
     868:	10 82       	st	Z, r1
		}
		
		if ( ucR & 0x04 )
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	84 70       	andi	r24, 0x04	; 4
     872:	99 27       	eor	r25, r25
     874:	89 2b       	or	r24, r25
     876:	81 f0       	breq	.+32     	; 0x898 <__stack+0x39>
		{
			OUTPORT = 0xFF;
     878:	88 e3       	ldi	r24, 0x38	; 56
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	2f ef       	ldi	r18, 0xFF	; 255
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     88e:	88 e3       	ldi	r24, 0x38	; 56
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	fc 01       	movw	r30, r24
     894:	10 82       	st	Z, r1
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
		}
		else
		{
			OUTPORT = 0xFF;
     898:	88 e3       	ldi	r24, 0x38	; 56
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     8a2:	88 e3       	ldi	r24, 0x38	; 56
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	fc 01       	movw	r30, r24
     8a8:	10 82       	st	Z, r1
		}
		
		if ( ucR& 0x02 )
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	82 70       	andi	r24, 0x02	; 2
     8b2:	99 27       	eor	r25, r25
     8b4:	89 2b       	or	r24, r25
     8b6:	81 f0       	breq	.+32     	; 0x8d8 <__stack+0x79>
		{
			OUTPORT = 0xFF;
     8b8:	88 e3       	ldi	r24, 0x38	; 56
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	2f ef       	ldi	r18, 0xFF	; 255
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     8ce:	88 e3       	ldi	r24, 0x38	; 56
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	fc 01       	movw	r30, r24
     8d4:	10 82       	st	Z, r1
     8d6:	09 c0       	rjmp	.+18     	; 0x8ea <__stack+0x8b>
		}
		else
		{
			OUTPORT = 0xFF;
     8d8:	88 e3       	ldi	r24, 0x38	; 56
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	2f ef       	ldi	r18, 0xFF	; 255
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     8e2:	88 e3       	ldi	r24, 0x38	; 56
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	fc 01       	movw	r30, r24
     8e8:	10 82       	st	Z, r1
		}
		
		if ( ucR & 0x01 )
     8ea:	8b 81       	ldd	r24, Y+3	; 0x03
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	81 70       	andi	r24, 0x01	; 1
     8f2:	99 27       	eor	r25, r25
     8f4:	89 2b       	or	r24, r25
     8f6:	81 f0       	breq	.+32     	; 0x918 <__stack+0xb9>
		{
			OUTPORT = 0xFF;
     8f8:	88 e3       	ldi	r24, 0x38	; 56
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     90e:	88 e3       	ldi	r24, 0x38	; 56
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	10 82       	st	Z, r1
     916:	09 c0       	rjmp	.+18     	; 0x92a <__stack+0xcb>
		}
		else
		{
			OUTPORT = 0xFF;
     918:	88 e3       	ldi	r24, 0x38	; 56
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     922:	88 e3       	ldi	r24, 0x38	; 56
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	fc 01       	movw	r30, r24
     928:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x80 )
     92a:	8d 81       	ldd	r24, Y+5	; 0x05
     92c:	88 23       	and	r24, r24
     92e:	84 f4       	brge	.+32     	; 0x950 <__stack+0xf1>
		{
			OUTPORT = 0xFF;
     930:	88 e3       	ldi	r24, 0x38	; 56
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     946:	88 e3       	ldi	r24, 0x38	; 56
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	10 82       	st	Z, r1
     94e:	09 c0       	rjmp	.+18     	; 0x962 <__stack+0x103>
		}
		else
		{
			OUTPORT = 0xFF;
     950:	88 e3       	ldi	r24, 0x38	; 56
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     95a:	88 e3       	ldi	r24, 0x38	; 56
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	fc 01       	movw	r30, r24
     960:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x40 )
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	80 74       	andi	r24, 0x40	; 64
     96a:	99 27       	eor	r25, r25
     96c:	89 2b       	or	r24, r25
     96e:	81 f0       	breq	.+32     	; 0x990 <__stack+0x131>
		{
			OUTPORT = 0xFF;
     970:	88 e3       	ldi	r24, 0x38	; 56
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	2f ef       	ldi	r18, 0xFF	; 255
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     986:	88 e3       	ldi	r24, 0x38	; 56
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	10 82       	st	Z, r1
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0x143>
		}
		else
		{
			OUTPORT = 0xFF;
     990:	88 e3       	ldi	r24, 0x38	; 56
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	fc 01       	movw	r30, r24
     998:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     99a:	88 e3       	ldi	r24, 0x38	; 56
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	fc 01       	movw	r30, r24
     9a0:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x20 )
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	80 72       	andi	r24, 0x20	; 32
     9aa:	99 27       	eor	r25, r25
     9ac:	89 2b       	or	r24, r25
     9ae:	81 f0       	breq	.+32     	; 0x9d0 <__stack+0x171>
		{
			OUTPORT = 0xFF;
     9b0:	88 e3       	ldi	r24, 0x38	; 56
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     9c6:	88 e3       	ldi	r24, 0x38	; 56
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	fc 01       	movw	r30, r24
     9cc:	10 82       	st	Z, r1
     9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__stack+0x183>
		}
		else
		{
			OUTPORT = 0xFF;
     9d0:	88 e3       	ldi	r24, 0x38	; 56
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     9da:	88 e3       	ldi	r24, 0x38	; 56
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x10 )
     9e2:	8d 81       	ldd	r24, Y+5	; 0x05
     9e4:	88 2f       	mov	r24, r24
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	80 71       	andi	r24, 0x10	; 16
     9ea:	99 27       	eor	r25, r25
     9ec:	89 2b       	or	r24, r25
     9ee:	81 f0       	breq	.+32     	; 0xa10 <__stack+0x1b1>
		{
			OUTPORT = 0xFF;
     9f0:	88 e3       	ldi	r24, 0x38	; 56
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	2f ef       	ldi	r18, 0xFF	; 255
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     a06:	88 e3       	ldi	r24, 0x38	; 56
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	10 82       	st	Z, r1
     a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__stack+0x1c3>
		}
		else
		{
			OUTPORT = 0xFF;
     a10:	88 e3       	ldi	r24, 0x38	; 56
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     a1a:	88 e3       	ldi	r24, 0x38	; 56
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	fc 01       	movw	r30, r24
     a20:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x08 )
     a22:	8d 81       	ldd	r24, Y+5	; 0x05
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	88 70       	andi	r24, 0x08	; 8
     a2a:	99 27       	eor	r25, r25
     a2c:	89 2b       	or	r24, r25
     a2e:	81 f0       	breq	.+32     	; 0xa50 <__stack+0x1f1>
		{
			OUTPORT = 0xFF;
     a30:	88 e3       	ldi	r24, 0x38	; 56
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     a46:	88 e3       	ldi	r24, 0x38	; 56
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	fc 01       	movw	r30, r24
     a4c:	10 82       	st	Z, r1
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__stack+0x203>
		}
		else
		{
			OUTPORT = 0xFF;
     a50:	88 e3       	ldi	r24, 0x38	; 56
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     a5a:	88 e3       	ldi	r24, 0x38	; 56
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x04 )
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	84 70       	andi	r24, 0x04	; 4
     a6a:	99 27       	eor	r25, r25
     a6c:	89 2b       	or	r24, r25
     a6e:	81 f0       	breq	.+32     	; 0xa90 <__stack+0x231>
		{
			OUTPORT = 0xFF;
     a70:	88 e3       	ldi	r24, 0x38	; 56
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	2f ef       	ldi	r18, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     a86:	88 e3       	ldi	r24, 0x38	; 56
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	fc 01       	movw	r30, r24
     a8c:	10 82       	st	Z, r1
     a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <__stack+0x243>
		}
		else
		{
			OUTPORT = 0xFF;
     a90:	88 e3       	ldi	r24, 0x38	; 56
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	2f ef       	ldi	r18, 0xFF	; 255
     a96:	fc 01       	movw	r30, r24
     a98:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     a9a:	88 e3       	ldi	r24, 0x38	; 56
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x02 )
     aa2:	8d 81       	ldd	r24, Y+5	; 0x05
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	82 70       	andi	r24, 0x02	; 2
     aaa:	99 27       	eor	r25, r25
     aac:	89 2b       	or	r24, r25
     aae:	81 f0       	breq	.+32     	; 0xad0 <__stack+0x271>
		{
			OUTPORT = 0xFF;
     ab0:	88 e3       	ldi	r24, 0x38	; 56
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	2f ef       	ldi	r18, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     ac6:	88 e3       	ldi	r24, 0x38	; 56
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	fc 01       	movw	r30, r24
     acc:	10 82       	st	Z, r1
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <__stack+0x283>
		}
		else
		{
			OUTPORT = 0xFF;
     ad0:	88 e3       	ldi	r24, 0x38	; 56
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     ada:	88 e3       	ldi	r24, 0x38	; 56
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	10 82       	st	Z, r1
		}
		
		if ( ucB & 0x01 )
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	88 2f       	mov	r24, r24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	81 70       	andi	r24, 0x01	; 1
     aea:	99 27       	eor	r25, r25
     aec:	89 2b       	or	r24, r25
     aee:	81 f0       	breq	.+32     	; 0xb10 <__stack+0x2b1>
		{
			OUTPORT = 0xFF;
     af0:	88 e3       	ldi	r24, 0x38	; 56
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	2f ef       	ldi	r18, 0xFF	; 255
     af6:	fc 01       	movw	r30, r24
     af8:	20 83       	st	Z, r18
	...
			NOPON
			NOPON
			NOPON
			OUTPORT = 0x00;
     b06:	88 e3       	ldi	r24, 0x38	; 56
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	fc 01       	movw	r30, r24
     b0c:	10 82       	st	Z, r1
     b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__stack+0x2c3>
		}
		else
		{
			OUTPORT = 0xFF;
     b10:	88 e3       	ldi	r24, 0x38	; 56
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
			NOPOFF
			OUTPORT = 0x00;
     b1a:	88 e3       	ldi	r24, 0x38	; 56
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	10 82       	st	Z, r1
		}
		
	if (i < uiLEDs)
     b22:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <i>
     b26:	28 2f       	mov	r18, r24
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	9a 81       	ldd	r25, Y+2	; 0x02
     b2e:	28 17       	cp	r18, r24
     b30:	39 07       	cpc	r19, r25
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__stack+0x2d7>
	{
		goto STARTtrans;
     b34:	fb cc       	rjmp	.-1546   	; 0x52c <LED_WRITE+0x1c>
	}
	return;
     b36:	00 00       	nop
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <main>:
/*** Projekt-Includes ***/
#include "Atmega2561.h"
#include "WS/WS2812b.c"

int main (void)
{
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	aa 97       	sbiw	r28, 0x2a	; 42
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
    SystemInit();																	//call System_Init
     b60:	39 d1       	rcall	.+626    	; 0xdd4 <SystemInit>

	
    /***Loop o' infinity***/
    while ( TRUE )																	//endless loop
    {
		if (PIND & 0x01)
     b62:	80 e3       	ldi	r24, 0x30	; 48
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	80 81       	ld	r24, Z
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	81 70       	andi	r24, 0x01	; 1
     b70:	99 27       	eor	r25, r25
     b72:	89 2b       	or	r24, r25
     b74:	31 f0       	breq	.+12     	; 0xb82 <main+0x3a>
		{			
			LED_WRITE(20, 5, 0, 0);
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	65 e0       	ldi	r22, 0x05	; 5
     b7c:	84 e1       	ldi	r24, 0x14	; 20
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	c7 dc       	rcall	.-1650   	; 0x510 <LED_WRITE>
		}
		
		if (PIND & 0x02)
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	80 81       	ld	r24, Z
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	82 70       	andi	r24, 0x02	; 2
     b90:	99 27       	eor	r25, r25
     b92:	89 2b       	or	r24, r25
     b94:	41 f0       	breq	.+16     	; 0xba6 <main+0x5e>
		{
			HSV_to_RGB(300, 100, 10, 1, 20);
     b96:	04 e1       	ldi	r16, 0x14	; 20
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	4a e0       	ldi	r20, 0x0A	; 10
     b9e:	64 e6       	ldi	r22, 0x64	; 100
     ba0:	8c e2       	ldi	r24, 0x2C	; 44
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	b5 da       	rcall	.-2710   	; 0x110 <HSV_to_RGB>
		}
		
		if (PIND & 0x04)
     ba6:	80 e3       	ldi	r24, 0x30	; 48
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	84 70       	andi	r24, 0x04	; 4
     bb4:	99 27       	eor	r25, r25
     bb6:	89 2b       	or	r24, r25
     bb8:	39 f1       	breq	.+78     	; 0xc08 <main+0xc0>
		{
			uint32_t uiColor = HSV_to_RGB(180, 100, 5, 0, 0);
     bba:	00 e0       	ldi	r16, 0x00	; 0
     bbc:	10 e0       	ldi	r17, 0x00	; 0
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	45 e0       	ldi	r20, 0x05	; 5
     bc2:	64 e6       	ldi	r22, 0x64	; 100
     bc4:	84 eb       	ldi	r24, 0xB4	; 180
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a3 da       	rcall	.-2746   	; 0x110 <HSV_to_RGB>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	8d 83       	std	Y+5, r24	; 0x05
     bd0:	9e 83       	std	Y+6, r25	; 0x06
     bd2:	af 83       	std	Y+7, r26	; 0x07
     bd4:	b8 87       	std	Y+8, r27	; 0x08
			
			ucR = (uiColor >> 16) & 0xFF;
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	af 81       	ldd	r26, Y+7	; 0x07
     bdc:	b8 85       	ldd	r27, Y+8	; 0x08
     bde:	cd 01       	movw	r24, r26
     be0:	aa 27       	eor	r26, r26
     be2:	bb 27       	eor	r27, r27
     be4:	89 87       	std	Y+9, r24	; 0x09
			ucG = (uiColor >> 8) & 0xFF;
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	9e 81       	ldd	r25, Y+6	; 0x06
     bea:	af 81       	ldd	r26, Y+7	; 0x07
     bec:	b8 85       	ldd	r27, Y+8	; 0x08
     bee:	89 2f       	mov	r24, r25
     bf0:	9a 2f       	mov	r25, r26
     bf2:	ab 2f       	mov	r26, r27
     bf4:	bb 27       	eor	r27, r27
     bf6:	8a 87       	std	Y+10, r24	; 0x0a
			ucB = (uiColor & 0xFF);
     bf8:	8d 81       	ldd	r24, Y+5	; 0x05
     bfa:	8b 87       	std	Y+11, r24	; 0x0b
			LED_WRITE(20, ucR, ucG, ucB);
     bfc:	2b 85       	ldd	r18, Y+11	; 0x0b
     bfe:	4a 85       	ldd	r20, Y+10	; 0x0a
     c00:	69 85       	ldd	r22, Y+9	; 0x09
     c02:	84 e1       	ldi	r24, 0x14	; 20
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	84 dc       	rcall	.-1784   	; 0x510 <LED_WRITE>
		}
		if (PIND & 0x08)
     c08:	80 e3       	ldi	r24, 0x30	; 48
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	fc 01       	movw	r30, r24
     c0e:	80 81       	ld	r24, Z
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 70       	andi	r24, 0x08	; 8
     c16:	99 27       	eor	r25, r25
     c18:	89 2b       	or	r24, r25
     c1a:	31 f0       	breq	.+12     	; 0xc28 <main+0xe0>
		{
			LED_WRITE(100, 0, 0, 0);
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	84 e6       	ldi	r24, 0x64	; 100
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	74 dc       	rcall	.-1816   	; 0x510 <LED_WRITE>
		}
		
		if (PIND & 0x10)
     c28:	80 e3       	ldi	r24, 0x30	; 48
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	88 2f       	mov	r24, r24
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	80 71       	andi	r24, 0x10	; 16
     c36:	99 27       	eor	r25, r25
     c38:	89 2b       	or	r24, r25
     c3a:	09 f4       	brne	.+2      	; 0xc3e <main+0xf6>
     c3c:	3f c0       	rjmp	.+126    	; 0xcbc <main+0x174>
		{
			char cEaster[] = {1, 1, 0, 1, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 1, 0};
     c3e:	81 e1       	ldi	r24, 0x11	; 17
     c40:	e0 e6       	ldi	r30, 0x60	; 96
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	de 01       	movw	r26, r28
     c46:	5a 96       	adiw	r26, 0x1a	; 26
     c48:	01 90       	ld	r0, Z+
     c4a:	0d 92       	st	X+, r0
     c4c:	8a 95       	dec	r24
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <main+0x100>
			for (int i = 0; i < 16; i++)
     c50:	1a 82       	std	Y+2, r1	; 0x02
     c52:	19 82       	std	Y+1, r1	; 0x01
     c54:	2f c0       	rjmp	.+94     	; 0xcb4 <main+0x16c>
			{
				if (cEaster[i] == 1)
     c56:	9e 01       	movw	r18, r28
     c58:	26 5e       	subi	r18, 0xE6	; 230
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	81 30       	cpi	r24, 0x01	; 1
				{
					LED_WRITE(1, 0, 1 , 0);
     c6a:	39 f4       	brne	.+14     	; 0xc7a <main+0x132>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	4c dc       	rcall	.-1896   	; 0x510 <LED_WRITE>
     c78:	18 c0       	rjmp	.+48     	; 0xcaa <main+0x162>
				}
				else if (cEaster[i] == 2)
     c7a:	9e 01       	movw	r18, r28
     c7c:	26 5e       	subi	r18, 0xE6	; 230
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	82 30       	cpi	r24, 0x02	; 2
				{
					LED_WRITE(1, 0, 0, 0);
     c8e:	39 f4       	brne	.+14     	; 0xc9e <main+0x156>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	3a dc       	rcall	.-1932   	; 0x510 <LED_WRITE>
				}
				else
				{
					LED_WRITE(1, 10 , 0, 0);
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <main+0x162>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	6a e0       	ldi	r22, 0x0A	; 10
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	33 dc       	rcall	.-1946   	; 0x510 <LED_WRITE>
		}
		
		if (PIND & 0x10)
		{
			char cEaster[] = {1, 1, 0, 1, 2, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 1, 0};
			for (int i = 0; i < 16; i++)
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	9a 81       	ldd	r25, Y+2	; 0x02
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	40 97       	sbiw	r24, 0x10	; 16
     cba:	6c f2       	brlt	.-102    	; 0xc56 <main+0x10e>
					LED_WRITE(1, 10 , 0, 0);
				}
			}
		}
		
		if (PIND & 0x20)
     cbc:	80 e3       	ldi	r24, 0x30	; 48
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	fc 01       	movw	r30, r24
     cc2:	80 81       	ld	r24, Z
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	80 72       	andi	r24, 0x20	; 32
     cca:	99 27       	eor	r25, r25
     ccc:	89 2b       	or	r24, r25
     cce:	a9 f0       	breq	.+42     	; 0xcfa <main+0x1b2>
		{
			for (unsigned int i = 0; i < 360; i++)
     cd0:	1c 82       	std	Y+4, r1	; 0x04
     cd2:	1b 82       	std	Y+3, r1	; 0x03
			{
				HSV_to_RGB(i, 100 , 5, 1, 5);
     cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <main+0x1a8>
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	05 e0       	ldi	r16, 0x05	; 5
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	21 e0       	ldi	r18, 0x01	; 1
     ce0:	45 e0       	ldi	r20, 0x05	; 5
     ce2:	64 e6       	ldi	r22, 0x64	; 100
     ce4:	15 da       	rcall	.-3030   	; 0x110 <HSV_to_RGB>
			}
		}
		
		if (PIND & 0x20)
		{
			for (unsigned int i = 0; i < 360; i++)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	9c 83       	std	Y+4, r25	; 0x04
     cee:	8b 83       	std	Y+3, r24	; 0x03
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	88 36       	cpi	r24, 0x68	; 104
     cf6:	91 40       	sbci	r25, 0x01	; 1
     cf8:	70 f3       	brcs	.-36     	; 0xcd6 <main+0x18e>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a8 e4       	ldi	r26, 0x48	; 72
     d00:	b2 e4       	ldi	r27, 0x42	; 66
     d02:	8c 87       	std	Y+12, r24	; 0x0c
     d04:	9d 87       	std	Y+13, r25	; 0x0d
     d06:	ae 87       	std	Y+14, r26	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d08:	bf 87       	std	Y+15, r27	; 0x0f
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	4a ef       	ldi	r20, 0xFA	; 250
     d10:	54 e4       	ldi	r21, 0x44	; 68
     d12:	6c 85       	ldd	r22, Y+12	; 0x0c
     d14:	7d 85       	ldd	r23, Y+13	; 0x0d
     d16:	8e 85       	ldd	r24, Y+14	; 0x0e
     d18:	9f 85       	ldd	r25, Y+15	; 0x0f
     d1a:	cd d1       	rcall	.+922    	; 0x10b6 <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	88 8b       	std	Y+16, r24	; 0x10
     d22:	99 8b       	std	Y+17, r25	; 0x11
     d24:	aa 8b       	std	Y+18, r26	; 0x12
	if (__tmp < 1.0)
     d26:	bb 8b       	std	Y+19, r27	; 0x13
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	68 89       	ldd	r22, Y+16	; 0x10
     d32:	79 89       	ldd	r23, Y+17	; 0x11
     d34:	8a 89       	ldd	r24, Y+18	; 0x12
     d36:	9b 89       	ldd	r25, Y+19	; 0x13
     d38:	d8 d0       	rcall	.+432    	; 0xeea <__cmpsf2>
     d3a:	88 23       	and	r24, r24
     d3c:	2c f4       	brge	.+10     	; 0xd48 <main+0x200>
		__ticks = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9d 8b       	std	Y+21, r25	; 0x15
     d44:	8c 8b       	std	Y+20, r24	; 0x14
	else if (__tmp > 65535)
     d46:	3b c0       	rjmp	.+118    	; 0xdbe <main+0x276>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	68 89       	ldd	r22, Y+16	; 0x10
     d52:	79 89       	ldd	r23, Y+17	; 0x11
     d54:	8a 89       	ldd	r24, Y+18	; 0x12
     d56:	9b 89       	ldd	r25, Y+19	; 0x13
     d58:	aa d1       	rcall	.+852    	; 0x10ae <__gesf2>
     d5a:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5c:	3c f5       	brge	.+78     	; 0xdac <main+0x264>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e2       	ldi	r20, 0x20	; 32
     d64:	51 e4       	ldi	r21, 0x41	; 65
     d66:	6c 85       	ldd	r22, Y+12	; 0x0c
     d68:	7d 85       	ldd	r23, Y+13	; 0x0d
     d6a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6c:	9f 85       	ldd	r25, Y+15	; 0x0f
     d6e:	a3 d1       	rcall	.+838    	; 0x10b6 <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	bc 01       	movw	r22, r24
     d76:	cd 01       	movw	r24, r26
     d78:	bc d0       	rcall	.+376    	; 0xef2 <__fixunssfsi>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	9d 8b       	std	Y+21, r25	; 0x15
     d80:	8c 8b       	std	Y+20, r24	; 0x14
     d82:	0f c0       	rjmp	.+30     	; 0xda2 <main+0x25a>
     d84:	88 ec       	ldi	r24, 0xC8	; 200
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9f 8b       	std	Y+23, r25	; 0x17
     d8a:	8e 8b       	std	Y+22, r24	; 0x16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8c:	8e 89       	ldd	r24, Y+22	; 0x16
     d8e:	9f 89       	ldd	r25, Y+23	; 0x17
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <main+0x248>
     d94:	9f 8b       	std	Y+23, r25	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	8e 8b       	std	Y+22, r24	; 0x16
     d98:	8c 89       	ldd	r24, Y+20	; 0x14
     d9a:	9d 89       	ldd	r25, Y+21	; 0x15
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	9d 8b       	std	Y+21, r25	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da0:	8c 8b       	std	Y+20, r24	; 0x14
     da2:	8c 89       	ldd	r24, Y+20	; 0x14
     da4:	9d 89       	ldd	r25, Y+21	; 0x15
     da6:	89 2b       	or	r24, r25
     da8:	69 f7       	brne	.-38     	; 0xd84 <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     daa:	13 c0       	rjmp	.+38     	; 0xdd2 <main+0x28a>
     dac:	68 89       	ldd	r22, Y+16	; 0x10
     dae:	79 89       	ldd	r23, Y+17	; 0x11
     db0:	8a 89       	ldd	r24, Y+18	; 0x12
     db2:	9b 89       	ldd	r25, Y+19	; 0x13
     db4:	9e d0       	rcall	.+316    	; 0xef2 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	9d 8b       	std	Y+21, r25	; 0x15
     dbc:	8c 8b       	std	Y+20, r24	; 0x14
     dbe:	8c 89       	ldd	r24, Y+20	; 0x14
     dc0:	9d 89       	ldd	r25, Y+21	; 0x15
     dc2:	99 8f       	std	Y+25, r25	; 0x19
     dc4:	88 8f       	std	Y+24, r24	; 0x18
     dc6:	88 8d       	ldd	r24, Y+24	; 0x18
     dc8:	99 8d       	ldd	r25, Y+25	; 0x19
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <main+0x282>
     dce:	99 8f       	std	Y+25, r25	; 0x19
     dd0:	88 8f       	std	Y+24, r24	; 0x18
			{
				HSV_to_RGB(i, 100 , 5, 1, 5);
			}
		}
		_delay_ms(50);
    }
     dd2:	c7 ce       	rjmp	.-626    	; 0xb62 <main+0x1a>

00000dd4 <SystemInit>:
}


void SystemInit (void)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
    /***initialize analog comparator***/
    ACSR = ACSR_INIT;                           //deactivate comparator to reduce power         
     ddc:	88 e2       	ldi	r24, 0x28	; 40
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	10 82       	st	Z, r1
	   
    /***initialize portB***/
    DDRB = PORTB_IO_CONFIG;                     //set IO-config
     de4:	87 e3       	ldi	r24, 0x37	; 55
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2f ef       	ldi	r18, 0xFF	; 255
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
    PORTB = PORTB_SIGNAL_CONFIG;                //set start value and Pullup configuration                
     dee:	88 e3       	ldi	r24, 0x38	; 56
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fc 01       	movw	r30, r24
     df4:	10 82       	st	Z, r1
	
    /***initialize portC***/
    DDRC = PORTC_IO_CONFIG;                     //set IO-config
     df6:	84 e3       	ldi	r24, 0x34	; 52
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
    PORTC = PORTC_SIGNAL_CONFIG;                //set start value and Pullup configuration
     e00:	85 e3       	ldi	r24, 0x35	; 53
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	fc 01       	movw	r30, r24
     e06:	10 82       	st	Z, r1
	       
    /***initialize portD***/
    DDRD = PORTD_IO_CONFIG;                     //set IO-config
     e08:	81 e3       	ldi	r24, 0x31	; 49
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	fc 01       	movw	r30, r24
     e0e:	10 82       	st	Z, r1
    PORTD = PORTD_SIGNAL_CONFIG;                //set start value and Pullup configuration	
     e10:	82 e3       	ldi	r24, 0x32	; 50
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	10 82       	st	Z, r1
}
     e18:	00 00       	nop
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <__subsf3>:
     e20:	50 58       	subi	r21, 0x80	; 128

00000e22 <__addsf3>:
     e22:	bb 27       	eor	r27, r27
     e24:	aa 27       	eor	r26, r26
     e26:	0e d0       	rcall	.+28     	; 0xe44 <__addsf3x>
     e28:	08 c1       	rjmp	.+528    	; 0x103a <__fp_round>
     e2a:	f9 d0       	rcall	.+498    	; 0x101e <__fp_pscA>
     e2c:	30 f0       	brcs	.+12     	; 0xe3a <__addsf3+0x18>
     e2e:	fe d0       	rcall	.+508    	; 0x102c <__fp_pscB>
     e30:	20 f0       	brcs	.+8      	; 0xe3a <__addsf3+0x18>
     e32:	31 f4       	brne	.+12     	; 0xe40 <__addsf3+0x1e>
     e34:	9f 3f       	cpi	r25, 0xFF	; 255
     e36:	11 f4       	brne	.+4      	; 0xe3c <__addsf3+0x1a>
     e38:	1e f4       	brtc	.+6      	; 0xe40 <__addsf3+0x1e>
     e3a:	ee c0       	rjmp	.+476    	; 0x1018 <__fp_nan>
     e3c:	0e f4       	brtc	.+2      	; 0xe40 <__addsf3+0x1e>
     e3e:	e0 95       	com	r30
     e40:	e7 fb       	bst	r30, 7
     e42:	e4 c0       	rjmp	.+456    	; 0x100c <__fp_inf>

00000e44 <__addsf3x>:
     e44:	e9 2f       	mov	r30, r25
     e46:	0a d1       	rcall	.+532    	; 0x105c <__fp_split3>
     e48:	80 f3       	brcs	.-32     	; 0xe2a <__addsf3+0x8>
     e4a:	ba 17       	cp	r27, r26
     e4c:	62 07       	cpc	r22, r18
     e4e:	73 07       	cpc	r23, r19
     e50:	84 07       	cpc	r24, r20
     e52:	95 07       	cpc	r25, r21
     e54:	18 f0       	brcs	.+6      	; 0xe5c <__addsf3x+0x18>
     e56:	71 f4       	brne	.+28     	; 0xe74 <__addsf3x+0x30>
     e58:	9e f5       	brtc	.+102    	; 0xec0 <__addsf3x+0x7c>
     e5a:	22 c1       	rjmp	.+580    	; 0x10a0 <__fp_zero>
     e5c:	0e f4       	brtc	.+2      	; 0xe60 <__addsf3x+0x1c>
     e5e:	e0 95       	com	r30
     e60:	0b 2e       	mov	r0, r27
     e62:	ba 2f       	mov	r27, r26
     e64:	a0 2d       	mov	r26, r0
     e66:	0b 01       	movw	r0, r22
     e68:	b9 01       	movw	r22, r18
     e6a:	90 01       	movw	r18, r0
     e6c:	0c 01       	movw	r0, r24
     e6e:	ca 01       	movw	r24, r20
     e70:	a0 01       	movw	r20, r0
     e72:	11 24       	eor	r1, r1
     e74:	ff 27       	eor	r31, r31
     e76:	59 1b       	sub	r21, r25
     e78:	99 f0       	breq	.+38     	; 0xea0 <__addsf3x+0x5c>
     e7a:	59 3f       	cpi	r21, 0xF9	; 249
     e7c:	50 f4       	brcc	.+20     	; 0xe92 <__addsf3x+0x4e>
     e7e:	50 3e       	cpi	r21, 0xE0	; 224
     e80:	68 f1       	brcs	.+90     	; 0xedc <__addsf3x+0x98>
     e82:	1a 16       	cp	r1, r26
     e84:	f0 40       	sbci	r31, 0x00	; 0
     e86:	a2 2f       	mov	r26, r18
     e88:	23 2f       	mov	r18, r19
     e8a:	34 2f       	mov	r19, r20
     e8c:	44 27       	eor	r20, r20
     e8e:	58 5f       	subi	r21, 0xF8	; 248
     e90:	f3 cf       	rjmp	.-26     	; 0xe78 <__addsf3x+0x34>
     e92:	46 95       	lsr	r20
     e94:	37 95       	ror	r19
     e96:	27 95       	ror	r18
     e98:	a7 95       	ror	r26
     e9a:	f0 40       	sbci	r31, 0x00	; 0
     e9c:	53 95       	inc	r21
     e9e:	c9 f7       	brne	.-14     	; 0xe92 <__addsf3x+0x4e>
     ea0:	7e f4       	brtc	.+30     	; 0xec0 <__addsf3x+0x7c>
     ea2:	1f 16       	cp	r1, r31
     ea4:	ba 0b       	sbc	r27, r26
     ea6:	62 0b       	sbc	r22, r18
     ea8:	73 0b       	sbc	r23, r19
     eaa:	84 0b       	sbc	r24, r20
     eac:	ba f0       	brmi	.+46     	; 0xedc <__addsf3x+0x98>
     eae:	91 50       	subi	r25, 0x01	; 1
     eb0:	a1 f0       	breq	.+40     	; 0xeda <__addsf3x+0x96>
     eb2:	ff 0f       	add	r31, r31
     eb4:	bb 1f       	adc	r27, r27
     eb6:	66 1f       	adc	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	c2 f7       	brpl	.-16     	; 0xeae <__addsf3x+0x6a>
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <__addsf3x+0x98>
     ec0:	ba 0f       	add	r27, r26
     ec2:	62 1f       	adc	r22, r18
     ec4:	73 1f       	adc	r23, r19
     ec6:	84 1f       	adc	r24, r20
     ec8:	48 f4       	brcc	.+18     	; 0xedc <__addsf3x+0x98>
     eca:	87 95       	ror	r24
     ecc:	77 95       	ror	r23
     ece:	67 95       	ror	r22
     ed0:	b7 95       	ror	r27
     ed2:	f7 95       	ror	r31
     ed4:	9e 3f       	cpi	r25, 0xFE	; 254
     ed6:	08 f0       	brcs	.+2      	; 0xeda <__addsf3x+0x96>
     ed8:	b3 cf       	rjmp	.-154    	; 0xe40 <__addsf3+0x1e>
     eda:	93 95       	inc	r25
     edc:	88 0f       	add	r24, r24
     ede:	08 f0       	brcs	.+2      	; 0xee2 <__addsf3x+0x9e>
     ee0:	99 27       	eor	r25, r25
     ee2:	ee 0f       	add	r30, r30
     ee4:	97 95       	ror	r25
     ee6:	87 95       	ror	r24
     ee8:	08 95       	ret

00000eea <__cmpsf2>:
     eea:	6c d0       	rcall	.+216    	; 0xfc4 <__fp_cmp>
     eec:	08 f4       	brcc	.+2      	; 0xef0 <__cmpsf2+0x6>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret

00000ef2 <__fixunssfsi>:
     ef2:	bc d0       	rcall	.+376    	; 0x106c <__fp_splitA>
     ef4:	88 f0       	brcs	.+34     	; 0xf18 <__fixunssfsi+0x26>
     ef6:	9f 57       	subi	r25, 0x7F	; 127
     ef8:	90 f0       	brcs	.+36     	; 0xf1e <__fixunssfsi+0x2c>
     efa:	b9 2f       	mov	r27, r25
     efc:	99 27       	eor	r25, r25
     efe:	b7 51       	subi	r27, 0x17	; 23
     f00:	a0 f0       	brcs	.+40     	; 0xf2a <__fixunssfsi+0x38>
     f02:	d1 f0       	breq	.+52     	; 0xf38 <__fixunssfsi+0x46>
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	1a f0       	brmi	.+6      	; 0xf14 <__fixunssfsi+0x22>
     f0e:	ba 95       	dec	r27
     f10:	c9 f7       	brne	.-14     	; 0xf04 <__fixunssfsi+0x12>
     f12:	12 c0       	rjmp	.+36     	; 0xf38 <__fixunssfsi+0x46>
     f14:	b1 30       	cpi	r27, 0x01	; 1
     f16:	81 f0       	breq	.+32     	; 0xf38 <__fixunssfsi+0x46>
     f18:	c3 d0       	rcall	.+390    	; 0x10a0 <__fp_zero>
     f1a:	b1 e0       	ldi	r27, 0x01	; 1
     f1c:	08 95       	ret
     f1e:	c0 c0       	rjmp	.+384    	; 0x10a0 <__fp_zero>
     f20:	67 2f       	mov	r22, r23
     f22:	78 2f       	mov	r23, r24
     f24:	88 27       	eor	r24, r24
     f26:	b8 5f       	subi	r27, 0xF8	; 248
     f28:	39 f0       	breq	.+14     	; 0xf38 <__fixunssfsi+0x46>
     f2a:	b9 3f       	cpi	r27, 0xF9	; 249
     f2c:	cc f3       	brlt	.-14     	; 0xf20 <__fixunssfsi+0x2e>
     f2e:	86 95       	lsr	r24
     f30:	77 95       	ror	r23
     f32:	67 95       	ror	r22
     f34:	b3 95       	inc	r27
     f36:	d9 f7       	brne	.-10     	; 0xf2e <__fixunssfsi+0x3c>
     f38:	3e f4       	brtc	.+14     	; 0xf48 <__fixunssfsi+0x56>
     f3a:	90 95       	com	r25
     f3c:	80 95       	com	r24
     f3e:	70 95       	com	r23
     f40:	61 95       	neg	r22
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	8f 4f       	sbci	r24, 0xFF	; 255
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	08 95       	ret

00000f4a <__floatunsisf>:
     f4a:	e8 94       	clt
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <__floatsisf+0x12>

00000f4e <__floatsisf>:
     f4e:	97 fb       	bst	r25, 7
     f50:	3e f4       	brtc	.+14     	; 0xf60 <__floatsisf+0x12>
     f52:	90 95       	com	r25
     f54:	80 95       	com	r24
     f56:	70 95       	com	r23
     f58:	61 95       	neg	r22
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	99 23       	and	r25, r25
     f62:	a9 f0       	breq	.+42     	; 0xf8e <__floatsisf+0x40>
     f64:	f9 2f       	mov	r31, r25
     f66:	96 e9       	ldi	r25, 0x96	; 150
     f68:	bb 27       	eor	r27, r27
     f6a:	93 95       	inc	r25
     f6c:	f6 95       	lsr	r31
     f6e:	87 95       	ror	r24
     f70:	77 95       	ror	r23
     f72:	67 95       	ror	r22
     f74:	b7 95       	ror	r27
     f76:	f1 11       	cpse	r31, r1
     f78:	f8 cf       	rjmp	.-16     	; 0xf6a <__floatsisf+0x1c>
     f7a:	fa f4       	brpl	.+62     	; 0xfba <__floatsisf+0x6c>
     f7c:	bb 0f       	add	r27, r27
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__floatsisf+0x36>
     f80:	60 ff       	sbrs	r22, 0
     f82:	1b c0       	rjmp	.+54     	; 0xfba <__floatsisf+0x6c>
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	8f 4f       	sbci	r24, 0xFF	; 255
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	16 c0       	rjmp	.+44     	; 0xfba <__floatsisf+0x6c>
     f8e:	88 23       	and	r24, r24
     f90:	11 f0       	breq	.+4      	; 0xf96 <__floatsisf+0x48>
     f92:	96 e9       	ldi	r25, 0x96	; 150
     f94:	11 c0       	rjmp	.+34     	; 0xfb8 <__floatsisf+0x6a>
     f96:	77 23       	and	r23, r23
     f98:	21 f0       	breq	.+8      	; 0xfa2 <__floatsisf+0x54>
     f9a:	9e e8       	ldi	r25, 0x8E	; 142
     f9c:	87 2f       	mov	r24, r23
     f9e:	76 2f       	mov	r23, r22
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <__floatsisf+0x5e>
     fa2:	66 23       	and	r22, r22
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <__floatsisf+0x74>
     fa6:	96 e8       	ldi	r25, 0x86	; 134
     fa8:	86 2f       	mov	r24, r22
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	2a f0       	brmi	.+10     	; 0xfba <__floatsisf+0x6c>
     fb0:	9a 95       	dec	r25
     fb2:	66 0f       	add	r22, r22
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 1f       	adc	r24, r24
     fb8:	da f7       	brpl	.-10     	; 0xfb0 <__floatsisf+0x62>
     fba:	88 0f       	add	r24, r24
     fbc:	96 95       	lsr	r25
     fbe:	87 95       	ror	r24
     fc0:	97 f9       	bld	r25, 7
     fc2:	08 95       	ret

00000fc4 <__fp_cmp>:
     fc4:	99 0f       	add	r25, r25
     fc6:	00 08       	sbc	r0, r0
     fc8:	55 0f       	add	r21, r21
     fca:	aa 0b       	sbc	r26, r26
     fcc:	e0 e8       	ldi	r30, 0x80	; 128
     fce:	fe ef       	ldi	r31, 0xFE	; 254
     fd0:	16 16       	cp	r1, r22
     fd2:	17 06       	cpc	r1, r23
     fd4:	e8 07       	cpc	r30, r24
     fd6:	f9 07       	cpc	r31, r25
     fd8:	c0 f0       	brcs	.+48     	; 0x100a <__fp_cmp+0x46>
     fda:	12 16       	cp	r1, r18
     fdc:	13 06       	cpc	r1, r19
     fde:	e4 07       	cpc	r30, r20
     fe0:	f5 07       	cpc	r31, r21
     fe2:	98 f0       	brcs	.+38     	; 0x100a <__fp_cmp+0x46>
     fe4:	62 1b       	sub	r22, r18
     fe6:	73 0b       	sbc	r23, r19
     fe8:	84 0b       	sbc	r24, r20
     fea:	95 0b       	sbc	r25, r21
     fec:	39 f4       	brne	.+14     	; 0xffc <__fp_cmp+0x38>
     fee:	0a 26       	eor	r0, r26
     ff0:	61 f0       	breq	.+24     	; 0x100a <__fp_cmp+0x46>
     ff2:	23 2b       	or	r18, r19
     ff4:	24 2b       	or	r18, r20
     ff6:	25 2b       	or	r18, r21
     ff8:	21 f4       	brne	.+8      	; 0x1002 <__fp_cmp+0x3e>
     ffa:	08 95       	ret
     ffc:	0a 26       	eor	r0, r26
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__fp_cmp+0x3e>
    1000:	a1 40       	sbci	r26, 0x01	; 1
    1002:	a6 95       	lsr	r26
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	81 1d       	adc	r24, r1
    1008:	81 1d       	adc	r24, r1
    100a:	08 95       	ret

0000100c <__fp_inf>:
    100c:	97 f9       	bld	r25, 7
    100e:	9f 67       	ori	r25, 0x7F	; 127
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	08 95       	ret

00001018 <__fp_nan>:
    1018:	9f ef       	ldi	r25, 0xFF	; 255
    101a:	80 ec       	ldi	r24, 0xC0	; 192
    101c:	08 95       	ret

0000101e <__fp_pscA>:
    101e:	00 24       	eor	r0, r0
    1020:	0a 94       	dec	r0
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	09 06       	cpc	r0, r25
    102a:	08 95       	ret

0000102c <__fp_pscB>:
    102c:	00 24       	eor	r0, r0
    102e:	0a 94       	dec	r0
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	05 06       	cpc	r0, r21
    1038:	08 95       	ret

0000103a <__fp_round>:
    103a:	09 2e       	mov	r0, r25
    103c:	03 94       	inc	r0
    103e:	00 0c       	add	r0, r0
    1040:	11 f4       	brne	.+4      	; 0x1046 <__fp_round+0xc>
    1042:	88 23       	and	r24, r24
    1044:	52 f0       	brmi	.+20     	; 0x105a <__fp_round+0x20>
    1046:	bb 0f       	add	r27, r27
    1048:	40 f4       	brcc	.+16     	; 0x105a <__fp_round+0x20>
    104a:	bf 2b       	or	r27, r31
    104c:	11 f4       	brne	.+4      	; 0x1052 <__fp_round+0x18>
    104e:	60 ff       	sbrs	r22, 0
    1050:	04 c0       	rjmp	.+8      	; 0x105a <__fp_round+0x20>
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	08 95       	ret

0000105c <__fp_split3>:
    105c:	57 fd       	sbrc	r21, 7
    105e:	90 58       	subi	r25, 0x80	; 128
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	59 f0       	breq	.+22     	; 0x107c <__fp_splitA+0x10>
    1066:	5f 3f       	cpi	r21, 0xFF	; 255
    1068:	71 f0       	breq	.+28     	; 0x1086 <__fp_splitA+0x1a>
    106a:	47 95       	ror	r20

0000106c <__fp_splitA>:
    106c:	88 0f       	add	r24, r24
    106e:	97 fb       	bst	r25, 7
    1070:	99 1f       	adc	r25, r25
    1072:	61 f0       	breq	.+24     	; 0x108c <__fp_splitA+0x20>
    1074:	9f 3f       	cpi	r25, 0xFF	; 255
    1076:	79 f0       	breq	.+30     	; 0x1096 <__fp_splitA+0x2a>
    1078:	87 95       	ror	r24
    107a:	08 95       	ret
    107c:	12 16       	cp	r1, r18
    107e:	13 06       	cpc	r1, r19
    1080:	14 06       	cpc	r1, r20
    1082:	55 1f       	adc	r21, r21
    1084:	f2 cf       	rjmp	.-28     	; 0x106a <__fp_split3+0xe>
    1086:	46 95       	lsr	r20
    1088:	f1 df       	rcall	.-30     	; 0x106c <__fp_splitA>
    108a:	08 c0       	rjmp	.+16     	; 0x109c <__fp_splitA+0x30>
    108c:	16 16       	cp	r1, r22
    108e:	17 06       	cpc	r1, r23
    1090:	18 06       	cpc	r1, r24
    1092:	99 1f       	adc	r25, r25
    1094:	f1 cf       	rjmp	.-30     	; 0x1078 <__fp_splitA+0xc>
    1096:	86 95       	lsr	r24
    1098:	71 05       	cpc	r23, r1
    109a:	61 05       	cpc	r22, r1
    109c:	08 94       	sec
    109e:	08 95       	ret

000010a0 <__fp_zero>:
    10a0:	e8 94       	clt

000010a2 <__fp_szero>:
    10a2:	bb 27       	eor	r27, r27
    10a4:	66 27       	eor	r22, r22
    10a6:	77 27       	eor	r23, r23
    10a8:	cb 01       	movw	r24, r22
    10aa:	97 f9       	bld	r25, 7
    10ac:	08 95       	ret

000010ae <__gesf2>:
    10ae:	8a df       	rcall	.-236    	; 0xfc4 <__fp_cmp>
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <__gesf2+0x6>
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	08 95       	ret

000010b6 <__mulsf3>:
    10b6:	0b d0       	rcall	.+22     	; 0x10ce <__mulsf3x>
    10b8:	c0 cf       	rjmp	.-128    	; 0x103a <__fp_round>
    10ba:	b1 df       	rcall	.-158    	; 0x101e <__fp_pscA>
    10bc:	28 f0       	brcs	.+10     	; 0x10c8 <__mulsf3+0x12>
    10be:	b6 df       	rcall	.-148    	; 0x102c <__fp_pscB>
    10c0:	18 f0       	brcs	.+6      	; 0x10c8 <__mulsf3+0x12>
    10c2:	95 23       	and	r25, r21
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <__mulsf3+0x12>
    10c6:	a2 cf       	rjmp	.-188    	; 0x100c <__fp_inf>
    10c8:	a7 cf       	rjmp	.-178    	; 0x1018 <__fp_nan>
    10ca:	11 24       	eor	r1, r1
    10cc:	ea cf       	rjmp	.-44     	; 0x10a2 <__fp_szero>

000010ce <__mulsf3x>:
    10ce:	c6 df       	rcall	.-116    	; 0x105c <__fp_split3>
    10d0:	a0 f3       	brcs	.-24     	; 0x10ba <__mulsf3+0x4>

000010d2 <__mulsf3_pse>:
    10d2:	95 9f       	mul	r25, r21
    10d4:	d1 f3       	breq	.-12     	; 0x10ca <__mulsf3+0x14>
    10d6:	95 0f       	add	r25, r21
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	55 1f       	adc	r21, r21
    10dc:	62 9f       	mul	r22, r18
    10de:	f0 01       	movw	r30, r0
    10e0:	72 9f       	mul	r23, r18
    10e2:	bb 27       	eor	r27, r27
    10e4:	f0 0d       	add	r31, r0
    10e6:	b1 1d       	adc	r27, r1
    10e8:	63 9f       	mul	r22, r19
    10ea:	aa 27       	eor	r26, r26
    10ec:	f0 0d       	add	r31, r0
    10ee:	b1 1d       	adc	r27, r1
    10f0:	aa 1f       	adc	r26, r26
    10f2:	64 9f       	mul	r22, r20
    10f4:	66 27       	eor	r22, r22
    10f6:	b0 0d       	add	r27, r0
    10f8:	a1 1d       	adc	r26, r1
    10fa:	66 1f       	adc	r22, r22
    10fc:	82 9f       	mul	r24, r18
    10fe:	22 27       	eor	r18, r18
    1100:	b0 0d       	add	r27, r0
    1102:	a1 1d       	adc	r26, r1
    1104:	62 1f       	adc	r22, r18
    1106:	73 9f       	mul	r23, r19
    1108:	b0 0d       	add	r27, r0
    110a:	a1 1d       	adc	r26, r1
    110c:	62 1f       	adc	r22, r18
    110e:	83 9f       	mul	r24, r19
    1110:	a0 0d       	add	r26, r0
    1112:	61 1d       	adc	r22, r1
    1114:	22 1f       	adc	r18, r18
    1116:	74 9f       	mul	r23, r20
    1118:	33 27       	eor	r19, r19
    111a:	a0 0d       	add	r26, r0
    111c:	61 1d       	adc	r22, r1
    111e:	23 1f       	adc	r18, r19
    1120:	84 9f       	mul	r24, r20
    1122:	60 0d       	add	r22, r0
    1124:	21 1d       	adc	r18, r1
    1126:	82 2f       	mov	r24, r18
    1128:	76 2f       	mov	r23, r22
    112a:	6a 2f       	mov	r22, r26
    112c:	11 24       	eor	r1, r1
    112e:	9f 57       	subi	r25, 0x7F	; 127
    1130:	50 40       	sbci	r21, 0x00	; 0
    1132:	8a f0       	brmi	.+34     	; 0x1156 <__mulsf3_pse+0x84>
    1134:	e1 f0       	breq	.+56     	; 0x116e <__mulsf3_pse+0x9c>
    1136:	88 23       	and	r24, r24
    1138:	4a f0       	brmi	.+18     	; 0x114c <__mulsf3_pse+0x7a>
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	bb 1f       	adc	r27, r27
    1140:	66 1f       	adc	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	91 50       	subi	r25, 0x01	; 1
    1148:	50 40       	sbci	r21, 0x00	; 0
    114a:	a9 f7       	brne	.-22     	; 0x1136 <__mulsf3_pse+0x64>
    114c:	9e 3f       	cpi	r25, 0xFE	; 254
    114e:	51 05       	cpc	r21, r1
    1150:	70 f0       	brcs	.+28     	; 0x116e <__mulsf3_pse+0x9c>
    1152:	5c cf       	rjmp	.-328    	; 0x100c <__fp_inf>
    1154:	a6 cf       	rjmp	.-180    	; 0x10a2 <__fp_szero>
    1156:	5f 3f       	cpi	r21, 0xFF	; 255
    1158:	ec f3       	brlt	.-6      	; 0x1154 <__mulsf3_pse+0x82>
    115a:	98 3e       	cpi	r25, 0xE8	; 232
    115c:	dc f3       	brlt	.-10     	; 0x1154 <__mulsf3_pse+0x82>
    115e:	86 95       	lsr	r24
    1160:	77 95       	ror	r23
    1162:	67 95       	ror	r22
    1164:	b7 95       	ror	r27
    1166:	f7 95       	ror	r31
    1168:	e7 95       	ror	r30
    116a:	9f 5f       	subi	r25, 0xFF	; 255
    116c:	c1 f7       	brne	.-16     	; 0x115e <__mulsf3_pse+0x8c>
    116e:	fe 2b       	or	r31, r30
    1170:	88 0f       	add	r24, r24
    1172:	91 1d       	adc	r25, r1
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret

0000117c <pow>:
    117c:	fa 01       	movw	r30, r20
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	30 96       	adiw	r30, 0x00	; 0
    1184:	21 05       	cpc	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	99 f1       	breq	.+102    	; 0x11f0 <pow+0x74>
    118a:	61 15       	cp	r22, r1
    118c:	71 05       	cpc	r23, r1
    118e:	61 f4       	brne	.+24     	; 0x11a8 <pow+0x2c>
    1190:	80 38       	cpi	r24, 0x80	; 128
    1192:	bf e3       	ldi	r27, 0x3F	; 63
    1194:	9b 07       	cpc	r25, r27
    1196:	49 f1       	breq	.+82     	; 0x11ea <pow+0x6e>
    1198:	68 94       	set
    119a:	90 38       	cpi	r25, 0x80	; 128
    119c:	81 05       	cpc	r24, r1
    119e:	61 f0       	breq	.+24     	; 0x11b8 <pow+0x3c>
    11a0:	80 38       	cpi	r24, 0x80	; 128
    11a2:	bf ef       	ldi	r27, 0xFF	; 255
    11a4:	9b 07       	cpc	r25, r27
    11a6:	41 f0       	breq	.+16     	; 0x11b8 <pow+0x3c>
    11a8:	99 23       	and	r25, r25
    11aa:	42 f5       	brpl	.+80     	; 0x11fc <pow+0x80>
    11ac:	ff 3f       	cpi	r31, 0xFF	; 255
    11ae:	e1 05       	cpc	r30, r1
    11b0:	31 05       	cpc	r19, r1
    11b2:	21 05       	cpc	r18, r1
    11b4:	11 f1       	breq	.+68     	; 0x11fa <pow+0x7e>
    11b6:	e8 94       	clt
    11b8:	08 94       	sec
    11ba:	e7 95       	ror	r30
    11bc:	d9 01       	movw	r26, r18
    11be:	aa 23       	and	r26, r26
    11c0:	29 f4       	brne	.+10     	; 0x11cc <pow+0x50>
    11c2:	ab 2f       	mov	r26, r27
    11c4:	be 2f       	mov	r27, r30
    11c6:	f8 5f       	subi	r31, 0xF8	; 248
    11c8:	d0 f3       	brcs	.-12     	; 0x11be <pow+0x42>
    11ca:	10 c0       	rjmp	.+32     	; 0x11ec <pow+0x70>
    11cc:	ff 5f       	subi	r31, 0xFF	; 255
    11ce:	70 f4       	brcc	.+28     	; 0x11ec <pow+0x70>
    11d0:	a6 95       	lsr	r26
    11d2:	e0 f7       	brcc	.-8      	; 0x11cc <pow+0x50>
    11d4:	f7 39       	cpi	r31, 0x97	; 151
    11d6:	50 f0       	brcs	.+20     	; 0x11ec <pow+0x70>
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <pow+0x64>
    11da:	ff 3a       	cpi	r31, 0xAF	; 175
    11dc:	38 f4       	brcc	.+14     	; 0x11ec <pow+0x70>
    11de:	9f 77       	andi	r25, 0x7F	; 127
    11e0:	9f 93       	push	r25
    11e2:	0c d0       	rcall	.+24     	; 0x11fc <pow+0x80>
    11e4:	0f 90       	pop	r0
    11e6:	07 fc       	sbrc	r0, 7
    11e8:	90 58       	subi	r25, 0x80	; 128
    11ea:	08 95       	ret
    11ec:	3e f0       	brts	.+14     	; 0x11fc <pow+0x80>
    11ee:	14 cf       	rjmp	.-472    	; 0x1018 <__fp_nan>
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	80 e8       	ldi	r24, 0x80	; 128
    11f6:	9f e3       	ldi	r25, 0x3F	; 63
    11f8:	08 95       	ret
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	9f 77       	andi	r25, 0x7F	; 127
    11fe:	5f 93       	push	r21
    1200:	4f 93       	push	r20
    1202:	3f 93       	push	r19
    1204:	2f 93       	push	r18
    1206:	9e d0       	rcall	.+316    	; 0x1344 <log>
    1208:	2f 91       	pop	r18
    120a:	3f 91       	pop	r19
    120c:	4f 91       	pop	r20
    120e:	5f 91       	pop	r21
    1210:	52 df       	rcall	.-348    	; 0x10b6 <__mulsf3>
    1212:	05 c0       	rjmp	.+10     	; 0x121e <exp>
    1214:	19 f4       	brne	.+6      	; 0x121c <pow+0xa0>
    1216:	0e f0       	brts	.+2      	; 0x121a <pow+0x9e>
    1218:	f9 ce       	rjmp	.-526    	; 0x100c <__fp_inf>
    121a:	42 cf       	rjmp	.-380    	; 0x10a0 <__fp_zero>
    121c:	fd ce       	rjmp	.-518    	; 0x1018 <__fp_nan>

0000121e <exp>:
    121e:	26 df       	rcall	.-436    	; 0x106c <__fp_splitA>
    1220:	c8 f3       	brcs	.-14     	; 0x1214 <pow+0x98>
    1222:	96 38       	cpi	r25, 0x86	; 134
    1224:	c0 f7       	brcc	.-16     	; 0x1216 <pow+0x9a>
    1226:	07 f8       	bld	r0, 7
    1228:	0f 92       	push	r0
    122a:	e8 94       	clt
    122c:	2b e3       	ldi	r18, 0x3B	; 59
    122e:	3a ea       	ldi	r19, 0xAA	; 170
    1230:	48 eb       	ldi	r20, 0xB8	; 184
    1232:	5f e7       	ldi	r21, 0x7F	; 127
    1234:	4e df       	rcall	.-356    	; 0x10d2 <__mulsf3_pse>
    1236:	0f 92       	push	r0
    1238:	0f 92       	push	r0
    123a:	0f 92       	push	r0
    123c:	4d b7       	in	r20, 0x3d	; 61
    123e:	5e b7       	in	r21, 0x3e	; 62
    1240:	0f 92       	push	r0
    1242:	c0 d0       	rcall	.+384    	; 0x13c4 <modf>
    1244:	e4 e5       	ldi	r30, 0x54	; 84
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	16 d0       	rcall	.+44     	; 0x1276 <__fp_powser>
    124a:	4f 91       	pop	r20
    124c:	5f 91       	pop	r21
    124e:	ef 91       	pop	r30
    1250:	ff 91       	pop	r31
    1252:	e5 95       	asr	r30
    1254:	ee 1f       	adc	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	49 f0       	breq	.+18     	; 0x126c <exp+0x4e>
    125a:	fe 57       	subi	r31, 0x7E	; 126
    125c:	e0 68       	ori	r30, 0x80	; 128
    125e:	44 27       	eor	r20, r20
    1260:	ee 0f       	add	r30, r30
    1262:	44 1f       	adc	r20, r20
    1264:	fa 95       	dec	r31
    1266:	e1 f7       	brne	.-8      	; 0x1260 <exp+0x42>
    1268:	41 95       	neg	r20
    126a:	55 0b       	sbc	r21, r21
    126c:	32 d0       	rcall	.+100    	; 0x12d2 <ldexp>
    126e:	0f 90       	pop	r0
    1270:	07 fe       	sbrs	r0, 7
    1272:	26 c0       	rjmp	.+76     	; 0x12c0 <inverse>
    1274:	08 95       	ret

00001276 <__fp_powser>:
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	1f 93       	push	r17
    127c:	0f 93       	push	r16
    127e:	ff 92       	push	r15
    1280:	ef 92       	push	r14
    1282:	df 92       	push	r13
    1284:	7b 01       	movw	r14, r22
    1286:	8c 01       	movw	r16, r24
    1288:	68 94       	set
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <__fp_powser+0x20>
    128c:	da 2e       	mov	r13, r26
    128e:	ef 01       	movw	r28, r30
    1290:	1e df       	rcall	.-452    	; 0x10ce <__mulsf3x>
    1292:	fe 01       	movw	r30, r28
    1294:	e8 94       	clt
    1296:	a5 91       	lpm	r26, Z+
    1298:	25 91       	lpm	r18, Z+
    129a:	35 91       	lpm	r19, Z+
    129c:	45 91       	lpm	r20, Z+
    129e:	55 91       	lpm	r21, Z+
    12a0:	ae f3       	brts	.-22     	; 0x128c <__fp_powser+0x16>
    12a2:	ef 01       	movw	r28, r30
    12a4:	cf dd       	rcall	.-1122   	; 0xe44 <__addsf3x>
    12a6:	fe 01       	movw	r30, r28
    12a8:	97 01       	movw	r18, r14
    12aa:	a8 01       	movw	r20, r16
    12ac:	da 94       	dec	r13
    12ae:	79 f7       	brne	.-34     	; 0x128e <__fp_powser+0x18>
    12b0:	df 90       	pop	r13
    12b2:	ef 90       	pop	r14
    12b4:	ff 90       	pop	r15
    12b6:	0f 91       	pop	r16
    12b8:	1f 91       	pop	r17
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <inverse>:
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	80 e8       	ldi	r24, 0x80	; 128
    12ca:	9f e3       	ldi	r25, 0x3F	; 63
    12cc:	ae c0       	rjmp	.+348    	; 0x142a <__divsf3>
    12ce:	9e ce       	rjmp	.-708    	; 0x100c <__fp_inf>
    12d0:	14 c1       	rjmp	.+552    	; 0x14fa <__fp_mpack>

000012d2 <ldexp>:
    12d2:	cc de       	rcall	.-616    	; 0x106c <__fp_splitA>
    12d4:	e8 f3       	brcs	.-6      	; 0x12d0 <inverse+0x10>
    12d6:	99 23       	and	r25, r25
    12d8:	d9 f3       	breq	.-10     	; 0x12d0 <inverse+0x10>
    12da:	94 0f       	add	r25, r20
    12dc:	51 1d       	adc	r21, r1
    12de:	bb f3       	brvs	.-18     	; 0x12ce <inverse+0xe>
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	50 40       	sbci	r21, 0x00	; 0
    12e4:	94 f0       	brlt	.+36     	; 0x130a <ldexp+0x38>
    12e6:	59 f0       	breq	.+22     	; 0x12fe <ldexp+0x2c>
    12e8:	88 23       	and	r24, r24
    12ea:	32 f0       	brmi	.+12     	; 0x12f8 <ldexp+0x26>
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	91 50       	subi	r25, 0x01	; 1
    12f4:	50 40       	sbci	r21, 0x00	; 0
    12f6:	c1 f7       	brne	.-16     	; 0x12e8 <ldexp+0x16>
    12f8:	9e 3f       	cpi	r25, 0xFE	; 254
    12fa:	51 05       	cpc	r21, r1
    12fc:	44 f7       	brge	.-48     	; 0x12ce <inverse+0xe>
    12fe:	88 0f       	add	r24, r24
    1300:	91 1d       	adc	r25, r1
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	97 f9       	bld	r25, 7
    1308:	08 95       	ret
    130a:	5f 3f       	cpi	r21, 0xFF	; 255
    130c:	ac f0       	brlt	.+42     	; 0x1338 <ldexp+0x66>
    130e:	98 3e       	cpi	r25, 0xE8	; 232
    1310:	9c f0       	brlt	.+38     	; 0x1338 <ldexp+0x66>
    1312:	bb 27       	eor	r27, r27
    1314:	86 95       	lsr	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	b7 95       	ror	r27
    131c:	08 f4       	brcc	.+2      	; 0x1320 <ldexp+0x4e>
    131e:	b1 60       	ori	r27, 0x01	; 1
    1320:	93 95       	inc	r25
    1322:	c1 f7       	brne	.-16     	; 0x1314 <ldexp+0x42>
    1324:	bb 0f       	add	r27, r27
    1326:	58 f7       	brcc	.-42     	; 0x12fe <ldexp+0x2c>
    1328:	11 f4       	brne	.+4      	; 0x132e <ldexp+0x5c>
    132a:	60 ff       	sbrs	r22, 0
    132c:	e8 cf       	rjmp	.-48     	; 0x12fe <ldexp+0x2c>
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	e3 cf       	rjmp	.-58     	; 0x12fe <ldexp+0x2c>
    1338:	b4 ce       	rjmp	.-664    	; 0x10a2 <__fp_szero>
    133a:	0e f0       	brts	.+2      	; 0x133e <ldexp+0x6c>
    133c:	de c0       	rjmp	.+444    	; 0x14fa <__fp_mpack>
    133e:	6c ce       	rjmp	.-808    	; 0x1018 <__fp_nan>
    1340:	68 94       	set
    1342:	64 ce       	rjmp	.-824    	; 0x100c <__fp_inf>

00001344 <log>:
    1344:	93 de       	rcall	.-730    	; 0x106c <__fp_splitA>
    1346:	c8 f3       	brcs	.-14     	; 0x133a <ldexp+0x68>
    1348:	99 23       	and	r25, r25
    134a:	d1 f3       	breq	.-12     	; 0x1340 <ldexp+0x6e>
    134c:	c6 f3       	brts	.-16     	; 0x133e <ldexp+0x6c>
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	1f 93       	push	r17
    1354:	0f 93       	push	r16
    1356:	ff 92       	push	r15
    1358:	c9 2f       	mov	r28, r25
    135a:	dd 27       	eor	r29, r29
    135c:	88 23       	and	r24, r24
    135e:	2a f0       	brmi	.+10     	; 0x136a <log+0x26>
    1360:	21 97       	sbiw	r28, 0x01	; 1
    1362:	66 0f       	add	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	da f7       	brpl	.-10     	; 0x1360 <log+0x1c>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f eb       	ldi	r21, 0xBF	; 191
    1372:	9f e3       	ldi	r25, 0x3F	; 63
    1374:	88 39       	cpi	r24, 0x98	; 152
    1376:	20 f0       	brcs	.+8      	; 0x1380 <log+0x3c>
    1378:	80 3e       	cpi	r24, 0xE0	; 224
    137a:	30 f0       	brcs	.+12     	; 0x1388 <log+0x44>
    137c:	21 96       	adiw	r28, 0x01	; 1
    137e:	8f 77       	andi	r24, 0x7F	; 127
    1380:	50 dd       	rcall	.-1376   	; 0xe22 <__addsf3>
    1382:	ec e7       	ldi	r30, 0x7C	; 124
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	03 c0       	rjmp	.+6      	; 0x138e <log+0x4a>
    1388:	4c dd       	rcall	.-1384   	; 0xe22 <__addsf3>
    138a:	e9 ea       	ldi	r30, 0xA9	; 169
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	73 df       	rcall	.-282    	; 0x1276 <__fp_powser>
    1390:	8b 01       	movw	r16, r22
    1392:	be 01       	movw	r22, r28
    1394:	ec 01       	movw	r28, r24
    1396:	fb 2e       	mov	r15, r27
    1398:	6f 57       	subi	r22, 0x7F	; 127
    139a:	71 09       	sbc	r23, r1
    139c:	75 95       	asr	r23
    139e:	77 1f       	adc	r23, r23
    13a0:	88 0b       	sbc	r24, r24
    13a2:	99 0b       	sbc	r25, r25
    13a4:	d4 dd       	rcall	.-1112   	; 0xf4e <__floatsisf>
    13a6:	28 e1       	ldi	r18, 0x18	; 24
    13a8:	32 e7       	ldi	r19, 0x72	; 114
    13aa:	41 e3       	ldi	r20, 0x31	; 49
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	8f de       	rcall	.-738    	; 0x10ce <__mulsf3x>
    13b0:	af 2d       	mov	r26, r15
    13b2:	98 01       	movw	r18, r16
    13b4:	ae 01       	movw	r20, r28
    13b6:	ff 90       	pop	r15
    13b8:	0f 91       	pop	r16
    13ba:	1f 91       	pop	r17
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	41 dd       	rcall	.-1406   	; 0xe44 <__addsf3x>
    13c2:	3b ce       	rjmp	.-906    	; 0x103a <__fp_round>

000013c4 <modf>:
    13c4:	fa 01       	movw	r30, r20
    13c6:	dc 01       	movw	r26, r24
    13c8:	aa 0f       	add	r26, r26
    13ca:	bb 1f       	adc	r27, r27
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	bf 57       	subi	r27, 0x7F	; 127
    13d2:	28 f4       	brcc	.+10     	; 0x13de <modf+0x1a>
    13d4:	22 27       	eor	r18, r18
    13d6:	33 27       	eor	r19, r19
    13d8:	44 27       	eor	r20, r20
    13da:	50 78       	andi	r21, 0x80	; 128
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <modf+0x58>
    13de:	b7 51       	subi	r27, 0x17	; 23
    13e0:	88 f4       	brcc	.+34     	; 0x1404 <modf+0x40>
    13e2:	ab 2f       	mov	r26, r27
    13e4:	00 24       	eor	r0, r0
    13e6:	46 95       	lsr	r20
    13e8:	37 95       	ror	r19
    13ea:	27 95       	ror	r18
    13ec:	01 1c       	adc	r0, r1
    13ee:	a3 95       	inc	r26
    13f0:	d2 f3       	brmi	.-12     	; 0x13e6 <modf+0x22>
    13f2:	00 20       	and	r0, r0
    13f4:	69 f0       	breq	.+26     	; 0x1410 <modf+0x4c>
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	44 1f       	adc	r20, r20
    13fc:	b3 95       	inc	r27
    13fe:	da f3       	brmi	.-10     	; 0x13f6 <modf+0x32>
    1400:	0d d0       	rcall	.+26     	; 0x141c <modf+0x58>
    1402:	0e cd       	rjmp	.-1508   	; 0xe20 <__subsf3>
    1404:	61 30       	cpi	r22, 0x01	; 1
    1406:	71 05       	cpc	r23, r1
    1408:	a0 e8       	ldi	r26, 0x80	; 128
    140a:	8a 07       	cpc	r24, r26
    140c:	b9 46       	sbci	r27, 0x69	; 105
    140e:	30 f4       	brcc	.+12     	; 0x141c <modf+0x58>
    1410:	9b 01       	movw	r18, r22
    1412:	ac 01       	movw	r20, r24
    1414:	66 27       	eor	r22, r22
    1416:	77 27       	eor	r23, r23
    1418:	88 27       	eor	r24, r24
    141a:	90 78       	andi	r25, 0x80	; 128
    141c:	30 96       	adiw	r30, 0x00	; 0
    141e:	21 f0       	breq	.+8      	; 0x1428 <modf+0x64>
    1420:	20 83       	st	Z, r18
    1422:	31 83       	std	Z+1, r19	; 0x01
    1424:	42 83       	std	Z+2, r20	; 0x02
    1426:	53 83       	std	Z+3, r21	; 0x03
    1428:	08 95       	ret

0000142a <__divsf3>:
    142a:	0c d0       	rcall	.+24     	; 0x1444 <__divsf3x>
    142c:	06 ce       	rjmp	.-1012   	; 0x103a <__fp_round>
    142e:	fe dd       	rcall	.-1028   	; 0x102c <__fp_pscB>
    1430:	40 f0       	brcs	.+16     	; 0x1442 <__divsf3+0x18>
    1432:	f5 dd       	rcall	.-1046   	; 0x101e <__fp_pscA>
    1434:	30 f0       	brcs	.+12     	; 0x1442 <__divsf3+0x18>
    1436:	21 f4       	brne	.+8      	; 0x1440 <__divsf3+0x16>
    1438:	5f 3f       	cpi	r21, 0xFF	; 255
    143a:	19 f0       	breq	.+6      	; 0x1442 <__divsf3+0x18>
    143c:	e7 cd       	rjmp	.-1074   	; 0x100c <__fp_inf>
    143e:	51 11       	cpse	r21, r1
    1440:	30 ce       	rjmp	.-928    	; 0x10a2 <__fp_szero>
    1442:	ea cd       	rjmp	.-1068   	; 0x1018 <__fp_nan>

00001444 <__divsf3x>:
    1444:	0b de       	rcall	.-1002   	; 0x105c <__fp_split3>
    1446:	98 f3       	brcs	.-26     	; 0x142e <__divsf3+0x4>

00001448 <__divsf3_pse>:
    1448:	99 23       	and	r25, r25
    144a:	c9 f3       	breq	.-14     	; 0x143e <__divsf3+0x14>
    144c:	55 23       	and	r21, r21
    144e:	b1 f3       	breq	.-20     	; 0x143c <__divsf3+0x12>
    1450:	95 1b       	sub	r25, r21
    1452:	55 0b       	sbc	r21, r21
    1454:	bb 27       	eor	r27, r27
    1456:	aa 27       	eor	r26, r26
    1458:	62 17       	cp	r22, r18
    145a:	73 07       	cpc	r23, r19
    145c:	84 07       	cpc	r24, r20
    145e:	38 f0       	brcs	.+14     	; 0x146e <__divsf3_pse+0x26>
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	5f 4f       	sbci	r21, 0xFF	; 255
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	44 1f       	adc	r20, r20
    146a:	aa 1f       	adc	r26, r26
    146c:	a9 f3       	breq	.-22     	; 0x1458 <__divsf3_pse+0x10>
    146e:	33 d0       	rcall	.+102    	; 0x14d6 <__divsf3_pse+0x8e>
    1470:	0e 2e       	mov	r0, r30
    1472:	3a f0       	brmi	.+14     	; 0x1482 <__divsf3_pse+0x3a>
    1474:	e0 e8       	ldi	r30, 0x80	; 128
    1476:	30 d0       	rcall	.+96     	; 0x14d8 <__divsf3_pse+0x90>
    1478:	91 50       	subi	r25, 0x01	; 1
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	e6 95       	lsr	r30
    147e:	00 1c       	adc	r0, r0
    1480:	ca f7       	brpl	.-14     	; 0x1474 <__divsf3_pse+0x2c>
    1482:	29 d0       	rcall	.+82     	; 0x14d6 <__divsf3_pse+0x8e>
    1484:	fe 2f       	mov	r31, r30
    1486:	27 d0       	rcall	.+78     	; 0x14d6 <__divsf3_pse+0x8e>
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	bb 1f       	adc	r27, r27
    1490:	26 17       	cp	r18, r22
    1492:	37 07       	cpc	r19, r23
    1494:	48 07       	cpc	r20, r24
    1496:	ab 07       	cpc	r26, r27
    1498:	b0 e8       	ldi	r27, 0x80	; 128
    149a:	09 f0       	breq	.+2      	; 0x149e <__divsf3_pse+0x56>
    149c:	bb 0b       	sbc	r27, r27
    149e:	80 2d       	mov	r24, r0
    14a0:	bf 01       	movw	r22, r30
    14a2:	ff 27       	eor	r31, r31
    14a4:	93 58       	subi	r25, 0x83	; 131
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	2a f0       	brmi	.+10     	; 0x14b4 <__divsf3_pse+0x6c>
    14aa:	9e 3f       	cpi	r25, 0xFE	; 254
    14ac:	51 05       	cpc	r21, r1
    14ae:	68 f0       	brcs	.+26     	; 0x14ca <__divsf3_pse+0x82>
    14b0:	ad cd       	rjmp	.-1190   	; 0x100c <__fp_inf>
    14b2:	f7 cd       	rjmp	.-1042   	; 0x10a2 <__fp_szero>
    14b4:	5f 3f       	cpi	r21, 0xFF	; 255
    14b6:	ec f3       	brlt	.-6      	; 0x14b2 <__divsf3_pse+0x6a>
    14b8:	98 3e       	cpi	r25, 0xE8	; 232
    14ba:	dc f3       	brlt	.-10     	; 0x14b2 <__divsf3_pse+0x6a>
    14bc:	86 95       	lsr	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	b7 95       	ror	r27
    14c4:	f7 95       	ror	r31
    14c6:	9f 5f       	subi	r25, 0xFF	; 255
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__divsf3_pse+0x74>
    14ca:	88 0f       	add	r24, r24
    14cc:	91 1d       	adc	r25, r1
    14ce:	96 95       	lsr	r25
    14d0:	87 95       	ror	r24
    14d2:	97 f9       	bld	r25, 7
    14d4:	08 95       	ret
    14d6:	e1 e0       	ldi	r30, 0x01	; 1
    14d8:	66 0f       	add	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	bb 1f       	adc	r27, r27
    14e0:	62 17       	cp	r22, r18
    14e2:	73 07       	cpc	r23, r19
    14e4:	84 07       	cpc	r24, r20
    14e6:	ba 07       	cpc	r27, r26
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__divsf3_pse+0xaa>
    14ea:	62 1b       	sub	r22, r18
    14ec:	73 0b       	sbc	r23, r19
    14ee:	84 0b       	sbc	r24, r20
    14f0:	ba 0b       	sbc	r27, r26
    14f2:	ee 1f       	adc	r30, r30
    14f4:	88 f7       	brcc	.-30     	; 0x14d8 <__divsf3_pse+0x90>
    14f6:	e0 95       	com	r30
    14f8:	08 95       	ret

000014fa <__fp_mpack>:
    14fa:	9f 3f       	cpi	r25, 0xFF	; 255
    14fc:	31 f0       	breq	.+12     	; 0x150a <__fp_mpack_finite+0xc>

000014fe <__fp_mpack_finite>:
    14fe:	91 50       	subi	r25, 0x01	; 1
    1500:	20 f4       	brcc	.+8      	; 0x150a <__fp_mpack_finite+0xc>
    1502:	87 95       	ror	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	88 0f       	add	r24, r24
    150c:	91 1d       	adc	r25, r1
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__divmodhi4>:
    1516:	97 fb       	bst	r25, 7
    1518:	07 2e       	mov	r0, r23
    151a:	16 f4       	brtc	.+4      	; 0x1520 <__divmodhi4+0xa>
    151c:	00 94       	com	r0
    151e:	06 d0       	rcall	.+12     	; 0x152c <__divmodhi4_neg1>
    1520:	77 fd       	sbrc	r23, 7
    1522:	08 d0       	rcall	.+16     	; 0x1534 <__divmodhi4_neg2>
    1524:	0b d0       	rcall	.+22     	; 0x153c <__udivmodhi4>
    1526:	07 fc       	sbrc	r0, 7
    1528:	05 d0       	rcall	.+10     	; 0x1534 <__divmodhi4_neg2>
    152a:	3e f4       	brtc	.+14     	; 0x153a <__divmodhi4_exit>

0000152c <__divmodhi4_neg1>:
    152c:	90 95       	com	r25
    152e:	81 95       	neg	r24
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	08 95       	ret

00001534 <__divmodhi4_neg2>:
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255

0000153a <__divmodhi4_exit>:
    153a:	08 95       	ret

0000153c <__udivmodhi4>:
    153c:	aa 1b       	sub	r26, r26
    153e:	bb 1b       	sub	r27, r27
    1540:	51 e1       	ldi	r21, 0x11	; 17
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <__udivmodhi4_ep>

00001544 <__udivmodhi4_loop>:
    1544:	aa 1f       	adc	r26, r26
    1546:	bb 1f       	adc	r27, r27
    1548:	a6 17       	cp	r26, r22
    154a:	b7 07       	cpc	r27, r23
    154c:	10 f0       	brcs	.+4      	; 0x1552 <__udivmodhi4_ep>
    154e:	a6 1b       	sub	r26, r22
    1550:	b7 0b       	sbc	r27, r23

00001552 <__udivmodhi4_ep>:
    1552:	88 1f       	adc	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	5a 95       	dec	r21
    1558:	a9 f7       	brne	.-22     	; 0x1544 <__udivmodhi4_loop>
    155a:	80 95       	com	r24
    155c:	90 95       	com	r25
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	08 95       	ret

00001564 <_exit>:
    1564:	f8 94       	cli

00001566 <__stop_program>:
    1566:	ff cf       	rjmp	.-2      	; 0x1566 <__stop_program>
